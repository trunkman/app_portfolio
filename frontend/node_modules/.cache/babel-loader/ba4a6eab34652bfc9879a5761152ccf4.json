{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/User.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'; // styled\n\nimport { Grid } from \"@mui/material\"; // api\n\nimport { fetchUser } from \"../apis/users\"; // コンポーネント\n\nimport { SideProfile } from \"../components/Users/SideProfile\";\nimport { MyProfile } from \"../components/Users/MyProfile\";\nimport { Microposts } from \"../components/Users/Microposts\";\nimport { Following } from \"../components/Users/Following\";\nimport { Followers } from \"../components/Users/Followers\";\nimport { AvatarButton } from \"../components/Navigations/AvatarButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const User = props => {\n  _s();\n\n  // const userId = props.match.params.id\n  const [user, setUser] = useState('No Name'); // const [microposts, setMicroposts] = useState([])\n\n  const [following, setFollowing] = useState([]);\n  const [followers, setFollowers] = useState([]);\n  const [isFetching, setIsFetching] = useState(false); // ユーザー情報の取得\n\n  useEffect(() => {\n    fetchUser({\n      userId: userId\n    }).then(data => {\n      setUser(data.user); // setMicroposts(data.microposts)\n\n      setFollowing(data.following);\n      setFollowers(data.followers);\n      setIsFetching(false);\n    });\n    return () => {\n      setUser([]); // setMicroposts([])\n\n      setFollowing([]);\n      setFollowers([]);\n    };\n  }, [isFetching]);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      sx: {\n        maxWidth: 1000,\n        mx: \"auto\",\n        bgcolor: 'grey.300'\n      },\n      children: [/*#__PURE__*/_jsxDEV(AvatarButton, {\n        user: user,\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 12,\n        sx: {\n          px: 2,\n          bgcolor: 'grey.100'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Switch, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: `${props.match.url}`,\n            children: /*#__PURE__*/_jsxDEV(MyProfile, {\n              dataFetching: () => setIsFetching(true),\n              loginUser: props.loginUser,\n              isLoggedIn: props.isLoggedIn,\n              user: user,\n              microposts: [1, 2],\n              following: following,\n              followers: followers\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: `${props.match.url}/microposts`,\n            children: /*#__PURE__*/_jsxDEV(Microposts, {\n              loginUser: props.loginUser,\n              userId: user.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: `${props.match.url}/following`,\n            children: /*#__PURE__*/_jsxDEV(Following, {\n              dataFetching: () => setIsFetching(true),\n              following: following\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: `${props.match.url}/followers`,\n            children: /*#__PURE__*/_jsxDEV(Followers, {\n              dataFetching: () => setIsFetching(true),\n              followers: followers\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(User, \"tIL7G3G0uCTeq+TX+qN7H9xBKpw=\");\n\n_c = User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/User.jsx"],"names":["React","useState","useEffect","BrowserRouter","Switch","Route","Grid","fetchUser","SideProfile","MyProfile","Microposts","Following","Followers","AvatarButton","User","props","user","setUser","following","setFollowing","followers","setFollowers","isFetching","setIsFetching","userId","then","data","maxWidth","mx","bgcolor","px","match","url","loginUser","isLoggedIn","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n// styled\nimport { Grid } from \"@mui/material\";\n// api\nimport { fetchUser } from \"../apis/users\";\n// コンポーネント\nimport { SideProfile } from \"../components/Users/SideProfile\";\nimport { MyProfile } from \"../components/Users/MyProfile\";\nimport { Microposts } from \"../components/Users/Microposts\";\nimport { Following } from \"../components/Users/Following\";\nimport { Followers } from \"../components/Users/Followers\";\nimport { AvatarButton } from \"../components/Navigations/AvatarButton\";\n\nexport const User = (props) => {\n  // const userId = props.match.params.id\n  const [user, setUser] = useState('No Name')\n  // const [microposts, setMicroposts] = useState([])\n  const [following, setFollowing] = useState([])\n  const [followers, setFollowers] = useState([])\n  const [isFetching, setIsFetching] = useState(false)\n  // ユーザー情報の取得\n  useEffect(() => {\n    fetchUser({ userId: userId })\n      .then(data => {\n        setUser(data.user)\n        // setMicroposts(data.microposts)\n        setFollowing(data.following)\n        setFollowers(data.followers)\n        setIsFetching(false)\n      })\n    return () => {\n      setUser([])\n      // setMicroposts([])\n      setFollowing([])\n      setFollowers([])\n    }\n  }, [isFetching])\n\n  return (\n    <BrowserRouter>\n      <Grid container sx={{ maxWidth: 1000, mx: \"auto\", bgcolor: 'grey.300' }}>\n        {/* <Grid item xs={12} sm={4} sx={{ px: 2, bgcolor: 'grey.100' }}>\n          <SideProfile\n            dataFetching={() => setIsFetching(true)}\n            loginUser={props.loginUser}\n            isLoggedIn={props.isLoggedIn}\n            user={user}\n            microposts={microposts}\n            following={following}\n            followers={followers}\n          />\n        </Grid> */}\n        <AvatarButton user={user} size=\"45\" />\n        <Grid item xs={12} sm={12} sx={{ px: 2, bgcolor: 'grey.100' }}>\n          <Switch>\n            <Route exact path={`${props.match.url}`}>\n              <MyProfile\n                dataFetching={() => setIsFetching(true)}\n                loginUser={props.loginUser}\n                isLoggedIn={props.isLoggedIn}\n                user={user}\n                microposts={[1, 2]}\n                following={following}\n                followers={followers}\n              />\n            </Route>\n          </Switch>\n\n          <Switch>\n            <Route exact path={`${props.match.url}/microposts`}>\n              <Microposts\n                loginUser={props.loginUser}\n                userId={user.id}\n              />\n            </Route>\n          </Switch>\n\n          <Switch>\n            <Route exact path={`${props.match.url}/following`}>\n              <Following\n                dataFetching={() => setIsFetching(true)}\n                following={following}\n              />\n            </Route>\n          </Switch>\n\n          <Switch>\n            <Route exact path={`${props.match.url}/followers`}>\n              <Followers\n                dataFetching={() => setIsFetching(true)}\n                followers={followers}\n              />\n            </Route>\n          </Switch>\n\n        </Grid>\n      </Grid>\n    </BrowserRouter>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}