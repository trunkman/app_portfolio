{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Timeline.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\"; // Style\n\nimport Box from '@mui/material/Box'; // Api\n\nimport { fetchTimeline } from \"../../apis/users\"; // Reducer\n\nimport { dataInitialState, dataReducer } from '../../reducer/DataReducer';\nimport { timelineInitialState, timelineReducer } from '../../reducer/TimelineReducer'; // Cpmponent\n\nimport { Micropost } from \"../../components/Lists/Micropost\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Timeline = ({\n  userId,\n  loginUser\n}) => {\n  _s();\n\n  const [timelineState, timelineDispatch] = useReducer(timelineReducer, timelineInitialState); // 投稿一覧を取得する\n\n  const Timeline = () => {\n    fetchTimeline(userId).then(data => {\n      timelineDispatch({\n        type: 'fetchSuccess',\n        payload: {\n          timeline: data.timeline,\n          liked_micropost_ids: data.liked_micropost_ids,\n          comments: data.comments\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    Timeline();\n  }, [timelineState.reRender]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2,\n        mx: 'auto',\n        maxWidth: 800\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u6295\\u7A3F\\u4E00\\u89A7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: timelineState.timeline.map(micropost => /*#__PURE__*/_jsxDEV(Micropost, {\n          micropost: micropost,\n          loginUserId: loginUser.id,\n          likedStatus: true // commentStatus={}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Timeline, \"cVSt634CP7y0oTvO33IbQK+GUJ4=\");\n\n_c = Timeline;\n{\n  /* {\n     comments.map(comment =>\n       <ListItem key={comment.id}>\n         <ListItemAvatar>\n           <AccountCircle sx={{ fontSize: 40 }} />\n         </ListItemAvatar>\n         <ListItemText\n           component=\"div\"\n           primary={comment.id}\n           secondary={comment.created_at}\n         />\n         {loginUser.id === comment.user_id && (\n           <Link component=\"div\" onClick={() => deleteCommentSubmit(comment.id)}>\n             delete\n           </Link>\n         )}\n         <Typography variant=\"body1\" pl={2}>\n           {comment.content}\n         </Typography>\n         <LikeButton\n           loginUserId={loginUser.id}\n           micropostId={comment.id}\n         />\n         <CommentButton\n           loginUserId={loginUser.id}\n           micropostId={comment.id}\n         />\n       </ListItem >\n     )\n   } */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Timeline.jsx"],"names":["React","useState","useEffect","useReducer","Box","fetchTimeline","dataInitialState","dataReducer","timelineInitialState","timelineReducer","Micropost","Timeline","userId","loginUser","timelineState","timelineDispatch","then","data","type","payload","timeline","liked_micropost_ids","comments","reRender","p","mx","maxWidth","map","micropost","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD,C,CACA;;AACA,OAAOC,GAAP,MAAgB,mBAAhB,C,CACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,2BAA9C;AACA,SAASC,oBAAT,EAA+BC,eAA/B,QAAsD,+BAAtD,C,CACA;;AACA,SAASC,SAAT,QAA0B,kCAA1B;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACvBC,EAAAA,MADuB;AAEvBC,EAAAA;AAFuB,CAAD,KAGlB;AAAA;;AACJ,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,UAAU,CAACM,eAAD,EAAkBD,oBAAlB,CAApD,CADI,CAGJ;;AACA,QAAMG,QAAQ,GAAG,MAAM;AACrBN,IAAAA,aAAa,CAACO,MAAD,CAAb,CACGI,IADH,CACQC,IAAI,IAAI;AACZF,MAAAA,gBAAgB,CAAC;AACfG,QAAAA,IAAI,EAAE,cADS;AAEfC,QAAAA,OAAO,EAAE;AACPC,UAAAA,QAAQ,EAAEH,IAAI,CAACG,QADR;AAEPC,UAAAA,mBAAmB,EAAEJ,IAAI,CAACI,mBAFnB;AAGPC,UAAAA,QAAQ,EAAEL,IAAI,CAACK;AAHR;AAFM,OAAD,CAAhB;AAQD,KAVH;AAWD,GAZD;;AAcApB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACG,aAAa,CAACS,QAAf,CAFM,CAAT;AAIA,sBACE;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AACPC,QAAAA,CAAC,EAAE,CADI;AAEPC,QAAAA,EAAE,EAAE,MAFG;AAGPC,QAAAA,QAAQ,EAAE;AAHH,OAAT;AAAA,8BAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,GAAD;AAAA,kBAEIZ,aAAa,CAACM,QAAd,CAAuBO,GAAvB,CAA2BC,SAAS,iBAClC,QAAC,SAAD;AACE,UAAA,SAAS,EAAEA,SADb;AAEE,UAAA,WAAW,EAAEf,SAAS,CAACgB,EAFzB;AAGE,UAAA,WAAW,EAAE,IAHf,CAIA;;AAJA;AAAA;AAAA;AAAA;AAAA,gBADF;AAFJ;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAuBD,CAhDM;;GAAMlB,Q;;KAAAA,Q;AAkDb;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAO","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n// Style\nimport Box from '@mui/material/Box';\n// Api\nimport { fetchTimeline } from \"../../apis/users\";\n// Reducer\nimport { dataInitialState, dataReducer } from '../../reducer/DataReducer';\nimport { timelineInitialState, timelineReducer } from '../../reducer/TimelineReducer';\n// Cpmponent\nimport { Micropost } from \"../../components/Lists/Micropost\";\n\nexport const Timeline = ({\n  userId,\n  loginUser,\n}) => {\n  const [timelineState, timelineDispatch] = useReducer(timelineReducer, timelineInitialState)\n\n  // 投稿一覧を取得する\n  const Timeline = () => {\n    fetchTimeline(userId)\n      .then(data => {\n        timelineDispatch({\n          type: 'fetchSuccess',\n          payload: {\n            timeline: data.timeline,\n            liked_micropost_ids: data.liked_micropost_ids,\n            comments: data.comments,\n          }\n        })\n      })\n  }\n\n  useEffect(() => {\n    Timeline()\n  }, [timelineState.reRender])\n\n  return (\n    <>\n      <Box sx={{\n        p: 2,\n        mx: 'auto',\n        maxWidth: 800\n      }}>\n        <h2>投稿一覧</h2>\n        <Box>\n          {\n            timelineState.timeline.map(micropost =>\n              <Micropost\n                micropost={micropost}\n                loginUserId={loginUser.id}\n                likedStatus={true}\n              // commentStatus={}\n              />\n            )\n          }\n        </Box>\n      </Box>\n    </>\n  )\n}\n\n{/* {\n    comments.map(comment =>\n      <ListItem key={comment.id}>\n        <ListItemAvatar>\n          <AccountCircle sx={{ fontSize: 40 }} />\n        </ListItemAvatar>\n        <ListItemText\n          component=\"div\"\n          primary={comment.id}\n          secondary={comment.created_at}\n        />\n        {loginUser.id === comment.user_id && (\n          <Link component=\"div\" onClick={() => deleteCommentSubmit(comment.id)}>\n            delete\n          </Link>\n        )}\n        <Typography variant=\"body1\" pl={2}>\n          {comment.content}\n        </Typography>\n        <LikeButton\n          loginUserId={loginUser.id}\n          micropostId={comment.id}\n        />\n        <CommentButton\n          loginUserId={loginUser.id}\n          micropostId={comment.id}\n        />\n      </ListItem >\n    )\n  } */}\n"]},"metadata":{},"sourceType":"module"}