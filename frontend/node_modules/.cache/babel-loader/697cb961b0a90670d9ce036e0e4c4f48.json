{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Rooms.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\"; // Style\n\nimport Box from \"@mui/material/Box\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Typography from \"@mui/material/Typography\"; // Icon\n\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined'; // Api\n\nimport { fetchRooms } from \"../../apis/users\";\nimport { deleteRoom } from \"../../apis/rooms\"; // Reducer\n\nimport { roomInitialState, roomReducer } from '../../reducer/RoomReducer'; // Component\n\nimport { Loading } from '../../components/Loading';\nimport { DeleteDialog } from \"../../components/Dialogs/DeleteDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => createStyles({\n  'root': {\n    alignItems: 'center',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    maxWidth: 600,\n    mx: 'auto',\n    textAlign: 'center',\n    width: '100%'\n  },\n  'list': {\n    display: 'flex',\n    alignItems: 'center',\n    borderRadius: 2,\n    my: 3\n  }\n}));\nexport const Rooms = ({\n  userId\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const history = useHistory();\n  const [roomState, roomDispatch] = useReducer(roomReducer, roomInitialState); // 削除確認ダイアログの開閉\n\n  const [open, setOpen] = useState({\n    isOpen: false,\n    roomId: ''\n  }); // トークルームの一覧を取得する\n\n  const Rooms = () => {\n    fetchRooms(userId).then(data => {\n      roomDispatch({\n        type: 'fetchSuccess',\n        payload: data.entries\n      });\n    });\n  }; // トークルームを削除する\n\n\n  const handleDelete = () => {\n    deleteRoom(open.roomId).then(() => setOpen({\n      isOpen: false\n    }));\n  };\n\n  useEffect(() => {\n    Rooms();\n  }, [open.isOpen]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            letterSpacing: 10,\n            pb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"\\u30C8\\u30FC\\u30AF\\u30EB\\u30FC\\u30E0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), roomState.fetchState !== 'ok' ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 42\n      }, this) : /*#__PURE__*/_jsxDEV(TalkUser, {\n        entries: roomState.entries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this) // <List>\n      //   {roomState.entries.length === 0 &&\n      //     <ListItemText>\n      //       トークしている人はいません。\n      //     </ListItemText>\n      //   }\n      //   {roomState.entries.length !== 0 &&\n      //     roomState.entries.map(entry =>\n      //       <ListItem\n      //         key={entry.room_id.toString()}\n      //         className={classes.list}\n      //       >\n      //         <ListItemAvatar>\n      //           <AccountCircle sx={{ fontSize: 60 }} />\n      //         </ListItemAvatar>\n      //         <Box\n      //           onClick={() => history.push(`/talk_rooms/${entry.room_id}`)}\n      //           sx={{\n      //             p: 3,\n      //             flexGrow: 1,\n      //           }}\n      //         >\n      //           <ListItemText>\n      //             <Typography variant=\"h5\" sx={{ letterSpacing: 2 }}>\n      //               {entry.other_user.name} さん\n      //             </Typography>\n      //             <Typography variant=\"h6\" >\n      //               <Box sx={{ letterSpacing: 2, mt: 2 }}>{entry.other_user.profile}</Box>\n      //             </Typography>\n      //           </ListItemText>\n      //         </Box>\n      //         <ListItemButton onClick={() => setOpen({ isOpen: true, roomId: entry.room_id })}>\n      //           <DeleteOutlinedIcon />\n      //         </ListItemButton>\n      //       </ListItem>\n      //     )\n      //   }\n      // </List>\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteDialog, {\n      handleClose: () => setOpen({\n        isOpen: false\n      }),\n      handleDelete: handleDelete,\n      message: 'トークルームを削除',\n      open: open.isOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Rooms, \"hIO0K/jJSgOGNZgI+r8vil64VnE=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = Rooms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rooms\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Rooms.jsx"],"names":["React","useEffect","useReducer","useState","useHistory","Box","createStyles","makeStyles","List","ListItem","ListItemAvatar","ListItemText","ListItemButton","Typography","AccountCircle","DeleteOutlinedIcon","fetchRooms","deleteRoom","roomInitialState","roomReducer","Loading","DeleteDialog","useStyles","alignItems","flexDirection","flexWrap","justifyContent","maxWidth","mx","textAlign","width","display","borderRadius","my","Rooms","userId","classes","history","roomState","roomDispatch","open","setOpen","isOpen","roomId","then","data","type","payload","entries","handleDelete","root","letterSpacing","pb","fetchState"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n// Style\nimport Box from \"@mui/material/Box\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Typography from \"@mui/material/Typography\";\n// Icon\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\n// Api\nimport { fetchRooms } from \"../../apis/users\";\nimport { deleteRoom } from \"../../apis/rooms\";\n// Reducer\nimport { roomInitialState, roomReducer } from '../../reducer/RoomReducer';\n// Component\nimport { Loading } from '../../components/Loading';\nimport { DeleteDialog } from \"../../components/Dialogs/DeleteDialog\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    'root': {\n      alignItems: 'center',\n      flexDirection: 'column',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      maxWidth: 600,\n      mx: 'auto',\n      textAlign: 'center',\n      width: '100%',\n    },\n    'list': {\n      display: 'flex',\n      alignItems: 'center',\n      borderRadius: 2,\n      my: 3,\n    }\n  }),\n);\n\nexport const Rooms = ({ userId }) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [roomState, roomDispatch] = useReducer(roomReducer, roomInitialState);\n  // 削除確認ダイアログの開閉\n  const [open, setOpen] = useState({\n    isOpen: false,\n    roomId: '',\n  });\n  // トークルームの一覧を取得する\n  const Rooms = () => {\n    fetchRooms(userId)\n      .then(data => {\n        roomDispatch({\n          type: 'fetchSuccess',\n          payload: data.entries,\n        });\n      });\n  }\n  // トークルームを削除する\n  const handleDelete = () => {\n    deleteRoom(open.roomId)\n      .then(() => setOpen({ isOpen: false }));\n  }\n\n  useEffect(() => {\n    Rooms();\n  }, [open.isOpen])\n\n  return (\n    <>\n      <Box className={classes.root}>\n        <Typography variant=\"h3\">\n          <Box sx={{ letterSpacing: 10, pb: 2 }}><b>トークルーム</b></Box>\n        </Typography>\n\n        {roomState.fetchState !== 'ok' ? <Loading /> :\n          <TalkUser\n            entries={roomState.entries}\n          />\n          // <List>\n          //   {roomState.entries.length === 0 &&\n          //     <ListItemText>\n          //       トークしている人はいません。\n          //     </ListItemText>\n          //   }\n          //   {roomState.entries.length !== 0 &&\n          //     roomState.entries.map(entry =>\n          //       <ListItem\n          //         key={entry.room_id.toString()}\n          //         className={classes.list}\n          //       >\n          //         <ListItemAvatar>\n          //           <AccountCircle sx={{ fontSize: 60 }} />\n          //         </ListItemAvatar>\n          //         <Box\n          //           onClick={() => history.push(`/talk_rooms/${entry.room_id}`)}\n          //           sx={{\n          //             p: 3,\n          //             flexGrow: 1,\n          //           }}\n          //         >\n          //           <ListItemText>\n          //             <Typography variant=\"h5\" sx={{ letterSpacing: 2 }}>\n          //               {entry.other_user.name} さん\n          //             </Typography>\n          //             <Typography variant=\"h6\" >\n          //               <Box sx={{ letterSpacing: 2, mt: 2 }}>{entry.other_user.profile}</Box>\n          //             </Typography>\n          //           </ListItemText>\n          //         </Box>\n          //         <ListItemButton onClick={() => setOpen({ isOpen: true, roomId: entry.room_id })}>\n          //           <DeleteOutlinedIcon />\n          //         </ListItemButton>\n          //       </ListItem>\n          //     )\n          //   }\n          // </List>\n        }\n      </Box>\n\n      <DeleteDialog\n        handleClose={() => setOpen({ isOpen: false })}\n        handleDelete={handleDelete}\n        message={'トークルームを削除'}\n        open={open.isOpen}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}