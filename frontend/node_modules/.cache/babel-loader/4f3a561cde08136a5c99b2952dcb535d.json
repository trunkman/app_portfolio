{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css'; // api\n\nimport { fetchLoggedIn } from './apis/sessions'; // コンテイナー\n\nimport { Home } from './containers/Home';\nimport { User } from './containers/User';\nimport { Users } from './containers/Users';\nimport { Header } from \"./components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState({}); // ログインのコールバック関数\n\n  const handleLogIn = user => {\n    setIsLoggedIn(true);\n    setUser(user);\n  }; // ログアウトのコールバック関数\n\n\n  const handleLogOut = () => {\n    setIsLoggedIn(false);\n    setUser({});\n  }; // ログインDialogを開閉する関数\n\n\n  const [openLogInDialog, setOpenLogInDialog] = useState(false);\n\n  const handleOpenLogIn = () => setOpenLogInDialog(true);\n\n  const handleCloseLogIn = () => setOpenLogInDialog(false); // ログイン状態を保持する\n\n\n  useEffect(() => {\n    fetchLoggedIn().then(data => {\n      if (data.user) {\n        handleLogIn(data.user);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      open: openLogInDialog,\n      handleOpenLogIn: handleOpenLogIn,\n      handleClose: handleCloseLogIn,\n      isLoggedIn: isLoggedIn,\n      handleLogIn: handleLogIn,\n      handleLogOut: handleLogOut,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Home, {\n          isLoggedIn: isLoggedIn,\n          handleLogIn: handleLogIn,\n          handleLogOut: handleLogOut\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/user/:id\",\n        children: /*#__PURE__*/_jsxDEV(User, {\n          isLoggedIn: isLoggedIn,\n          handleLogIn: handleLogIn,\n          handleLogOut: handleLogOut,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/users\",\n        children: /*#__PURE__*/_jsxDEV(Users, {\n          isLoggedIn: isLoggedIn,\n          handleLogIn: handleLogIn,\n          handleLogOut: handleLogOut,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"J+qUdhmRaDy7YrpPWqo53oMWl9w=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/App.jsx"],"names":["React","useState","useEffect","BrowserRouter","Switch","Route","fetchLoggedIn","Home","User","Users","Header","App","isLoggedIn","setIsLoggedIn","user","setUser","handleLogIn","handleLogOut","openLogInDialog","setOpenLogInDialog","handleOpenLogIn","handleCloseLogIn","then","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport './App.css';\n// api\nimport { fetchLoggedIn } from './apis/sessions';\n// コンテイナー\nimport { Home } from './containers/Home'\nimport { User } from './containers/User'\nimport { Users } from './containers/Users'\nimport { Header } from \"./components/Header\"\n\nexport default function App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState({});\n  // ログインのコールバック関数\n  const handleLogIn = (user) => {\n    setIsLoggedIn(true);\n    setUser(user);\n  }\n  // ログアウトのコールバック関数\n  const handleLogOut = () => {\n    setIsLoggedIn(false);\n    setUser({});\n  }\n  // ログインDialogを開閉する関数\n  const [openLogInDialog, setOpenLogInDialog] = useState(false)\n  const handleOpenLogIn = () => setOpenLogInDialog(true)\n  const handleCloseLogIn = () => setOpenLogInDialog(false)\n\n  // ログイン状態を保持する\n  useEffect(() => {\n    fetchLoggedIn()\n      .then(data => {\n        if (data.user) { handleLogIn(data.user) }\n      })\n  }, [])\n\n  return (\n    <BrowserRouter>\n      <Header\n        open={openLogInDialog}\n        handleOpenLogIn={handleOpenLogIn}\n        handleClose={handleCloseLogIn}\n        isLoggedIn={isLoggedIn}\n        handleLogIn={handleLogIn}\n        handleLogOut={handleLogOut}\n        user={user}\n      />\n      <Switch>\n        <Route exact\n          path=\"/\">\n          <Home\n            isLoggedIn={isLoggedIn}\n            handleLogIn={handleLogIn}\n            handleLogOut={handleLogOut}\n          />\n        </Route>\n      </Switch>\n      <Switch>\n        <Route exact\n          path=\"/user/:id\"\n        >\n          <User\n            isLoggedIn={isLoggedIn}\n            handleLogIn={handleLogIn}\n            handleLogOut={handleLogOut}\n            user={user}\n          />\n\n        </Route>\n      </Switch>\n      <Switch>\n        <Route exact\n          path=\"/users\">\n          <Users\n            isLoggedIn={isLoggedIn}\n            handleLogIn={handleLogIn}\n            handleLogOut={handleLogOut}\n            user={user}\n          />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}