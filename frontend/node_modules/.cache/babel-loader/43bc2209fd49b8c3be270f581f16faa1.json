{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/MessageRoom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\"; // Style\n\nimport Box from \"@mui/material/Box\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@mui/material/List\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Typography from \"@mui/material/Typography\"; // Api\n\nimport { fetchMessages } from \"../../apis/rooms\"; // Reducer\n\nimport { messageInitialState, messageReducer } from '../../reducer/MessageReducer'; // Cpmponent\n\nimport { Chat } from \"../../components/Forms/Chat\";\nimport { Message } from \"../../components/Lists/Message\";\nimport { Loading } from '../../components/Loading';\nimport { Tooltip } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => createStyles({\n  'root': {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    maxWidth: 600,\n    textAlign: 'center',\n    width: '100%'\n  },\n  'title': {\n    top: 90,\n    position: 'fixed',\n    width: 600,\n    zIndex: 'tooltip,'\n  },\n  'messages': {\n    display: 'flex',\n    flexDirection: 'column-reverse',\n    flexGrow: 1,\n    width: '100%',\n    height: '100%',\n    overflow: \"auto\",\n    marginBottom: 150\n  }\n}));\nexport const MessageRoom = ({\n  roomId,\n  loginUser\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [messageState, messageDispatch] = useReducer(messageReducer, messageInitialState); // トークルームのメッセージ一覧を取得する\n\n  const Messages = () => {\n    fetchMessages(roomId).then(data => {\n      messageDispatch({\n        type: 'fetchSuccess',\n        payload: {\n          messages: data.messages,\n          user: data.user\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    Messages();\n  }, [messageState.reRender]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      className: classes.title,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          letterSpacing: 10,\n          pb: 2,\n          bgcolor: '#001e3c'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: messageState.user.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), messageState.fetchState !== 'ok' ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 43\n    }, this) : /*#__PURE__*/_jsxDEV(List, {\n      className: classes.messages,\n      id: \"scroll-area\",\n      children: messageState.messages.length === 0 ? /*#__PURE__*/_jsxDEV(ListItemText, {\n        children: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this) : messageState.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        message: message,\n        loginUserId: loginUser.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      user_id: loginUser.id,\n      room_id: roomId,\n      dataFetch: () => messageDispatch({\n        type: 'fetching'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageRoom, \"rZr6H4yHzpBwoKfri/SkrOelCVM=\", false, function () {\n  return [useStyles];\n});\n\n_c = MessageRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageRoom\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/MessageRoom.jsx"],"names":["React","useEffect","useReducer","Box","createStyles","makeStyles","List","ListItemText","Typography","fetchMessages","messageInitialState","messageReducer","Chat","Message","Loading","Tooltip","useStyles","alignItems","display","flexDirection","justifyContent","maxWidth","textAlign","width","top","position","zIndex","flexGrow","height","overflow","marginBottom","MessageRoom","roomId","loginUser","classes","messageState","messageDispatch","Messages","then","data","type","payload","messages","user","reRender","root","title","letterSpacing","pb","bgcolor","name","fetchState","length","map","message","index","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\n// Style\nimport Box from \"@mui/material/Box\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@mui/material/List\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Typography from \"@mui/material/Typography\";\n// Api\nimport { fetchMessages } from \"../../apis/rooms\"\n// Reducer\nimport { messageInitialState, messageReducer } from '../../reducer/MessageReducer';\n// Cpmponent\nimport { Chat } from \"../../components/Forms/Chat\";\nimport { Message } from \"../../components/Lists/Message\";\nimport { Loading } from '../../components/Loading';\nimport { Tooltip } from \"@mui/material\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    'root': {\n      alignItems: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      maxWidth: 600,\n      textAlign: 'center',\n      width: '100%',\n    },\n    'title': {\n      top: 90,\n      position: 'fixed',\n      width: 600,\n      zIndex: 'tooltip,'\n    },\n    'messages': {\n      display: 'flex',\n      flexDirection: 'column-reverse',\n      flexGrow: 1,\n      width: '100%',\n      height: '100%',\n      overflow: \"auto\",\n      marginBottom: 150,\n    }\n  }),\n);\n\nexport const MessageRoom = ({\n  roomId,\n  loginUser,\n}) => {\n  const classes = useStyles();\n  const [messageState, messageDispatch] = useReducer(messageReducer, messageInitialState)\n  // トークルームのメッセージ一覧を取得する\n  const Messages = () => {\n    fetchMessages(roomId)\n      .then(data => {\n        messageDispatch({\n          type: 'fetchSuccess',\n          payload: {\n            messages: data.messages,\n            user: data.user,\n          }\n        });\n      });\n  }\n\n  useEffect(() => {\n    Messages();\n  }, [messageState.reRender])\n\n  return (\n    <Box className={classes.root}>\n      <Typography variant=\"h4\" className={classes.title}>\n        <Box sx={{ letterSpacing: 10, pb: 2, bgcolor: '#001e3c' }}>\n          <b>{messageState.user.name}</b>\n        </Box>\n      </Typography>\n\n      {messageState.fetchState !== 'ok' ? <Loading /> :\n        <List className={classes.messages} id={\"scroll-area\"}>\n          {messageState.messages.length === 0 ? (\n            <ListItemText>\n              メッセージはありません。\n            </ListItemText>\n          ) : (\n            messageState.messages.map((message, index) =>\n              <Message\n                message={message}\n                loginUserId={loginUser.id}\n              />\n            )\n          )}\n        </List>\n      }\n      <Chat\n        user_id={loginUser.id}\n        room_id={roomId}\n        dataFetch={() => messageDispatch({ type: 'fetching' })}\n      />\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}