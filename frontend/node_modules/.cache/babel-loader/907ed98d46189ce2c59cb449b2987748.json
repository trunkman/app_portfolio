{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Timeline.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\"; // Style\n\nimport Box from '@mui/material/Box'; // Api\n\nimport { fetchTimeline } from \"../../apis/users\"; // Reducer\n\nimport { timelineInitialState, timelineReducer } from '../../reducer/TimelineReducer'; // Cpmponent\n\nimport { Micropost } from \"../../components/Lists/Micropost\";\nimport { Loading } from '../../components/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Timeline = ({\n  userId,\n  loginUser\n}) => {\n  _s();\n\n  const [timelineState, timelineDispatch] = useReducer(timelineReducer, timelineInitialState); // 投稿一覧を取得する\n\n  const Timeline = () => {\n    fetchTimeline(userId).then(data => {\n      timelineDispatch({\n        type: 'fetchSuccess',\n        payload: {\n          timeline: data.timeline\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    Timeline();\n  }, [timelineState.reRender]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2,\n        mx: 'auto',\n        maxWidth: 800\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u30BF\\u30A4\\u30E0\\u30E9\\u30A4\\u30F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: timelineState.fetchState != 'ok' ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 48\n        }, this) : timelineState.timeline.map(timeline => /*#__PURE__*/_jsxDEV(Micropost, {\n          commentCount: timeline.commentCount,\n          likeStatus: timeline.likeStatus,\n          loginUser: loginUser,\n          micropost: timeline.micropost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Timeline, \"cVSt634CP7y0oTvO33IbQK+GUJ4=\");\n\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Timeline.jsx"],"names":["React","useState","useEffect","useReducer","Box","fetchTimeline","timelineInitialState","timelineReducer","Micropost","Loading","Timeline","userId","loginUser","timelineState","timelineDispatch","then","data","type","payload","timeline","reRender","p","mx","maxWidth","fetchState","map","commentCount","likeStatus","micropost"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD,C,CACA;;AACA,OAAOC,GAAP,MAAgB,mBAAhB,C,CACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;;AACA,SAASC,oBAAT,EAA+BC,eAA/B,QAAsD,+BAAtD,C,CACA;;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACvBC,EAAAA,MADuB;AAEvBC,EAAAA;AAFuB,CAAD,KAGlB;AAAA;;AACJ,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,UAAU,CAACI,eAAD,EAAkBD,oBAAlB,CAApD,CADI,CAGJ;;AACA,QAAMI,QAAQ,GAAG,MAAM;AACrBL,IAAAA,aAAa,CAACM,MAAD,CAAb,CACGI,IADH,CACQC,IAAI,IAAI;AACZF,MAAAA,gBAAgB,CAAC;AACfG,QAAAA,IAAI,EAAE,cADS;AAEfC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,QAAQ,EAAEH,IAAI,CAACG;AAAjB;AAFM,OAAD,CAAhB;AAID,KANH;AAOD,GARD;;AAUAjB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACG,aAAa,CAACO,QAAf,CAFM,CAAT;AAIA,sBACE;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AACPC,QAAAA,CAAC,EAAE,CADI;AAEPC,QAAAA,EAAE,EAAE,MAFG;AAGPC,QAAAA,QAAQ,EAAE;AAHH,OAAT;AAAA,8BAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,GAAD;AAAA,kBAEIV,aAAa,CAACW,UAAd,IAA4B,IAA5B,gBAAmC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAAnC,GACEX,aAAa,CAACM,QAAd,CAAuBM,GAAvB,CAA2BN,QAAQ,iBACjC,QAAC,SAAD;AACE,UAAA,YAAY,EAAEA,QAAQ,CAACO,YADzB;AAEE,UAAA,UAAU,EAAEP,QAAQ,CAACQ,UAFvB;AAGE,UAAA,SAAS,EAAEf,SAHb;AAIE,UAAA,SAAS,EAAEO,QAAQ,CAACS;AAJtB;AAAA;AAAA;AAAA;AAAA,gBADF;AAHN;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAwBD,CA7CM;;GAAMlB,Q;;KAAAA,Q","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n// Style\nimport Box from '@mui/material/Box';\n// Api\nimport { fetchTimeline } from \"../../apis/users\";\n// Reducer\nimport { timelineInitialState, timelineReducer } from '../../reducer/TimelineReducer';\n// Cpmponent\nimport { Micropost } from \"../../components/Lists/Micropost\";\nimport { Loading } from '../../components/Loading';\n\nexport const Timeline = ({\n  userId,\n  loginUser,\n}) => {\n  const [timelineState, timelineDispatch] = useReducer(timelineReducer, timelineInitialState)\n\n  // 投稿一覧を取得する\n  const Timeline = () => {\n    fetchTimeline(userId)\n      .then(data => {\n        timelineDispatch({\n          type: 'fetchSuccess',\n          payload: { timeline: data.timeline }\n        })\n      })\n  }\n\n  useEffect(() => {\n    Timeline()\n  }, [timelineState.reRender])\n\n  return (\n    <>\n      <Box sx={{\n        p: 2,\n        mx: 'auto',\n        maxWidth: 800\n      }}>\n        <h2>タイムライン</h2>\n        <Box>\n          {\n            timelineState.fetchState != 'ok' ? <Loading /> :\n              timelineState.timeline.map(timeline =>\n                <Micropost\n                  commentCount={timeline.commentCount}\n                  likeStatus={timeline.likeStatus}\n                  loginUser={loginUser}\n                  micropost={timeline.micropost}\n                />\n              )\n          }\n        </Box>\n      </Box>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}