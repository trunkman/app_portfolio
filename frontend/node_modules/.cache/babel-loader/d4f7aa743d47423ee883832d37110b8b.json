{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/components/Dialogs/MicropostDialog.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useReducer } from 'react'; // Style\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent'; // Api\n\nimport { fetchMicropost } from '../../apis/microposts'; // Reducer\n\nimport { postReducer, postInitialState } from '../../reducer/PostReducer'; // Component\n\nimport { Loading } from \"../../components/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MicropostDialog = ({\n  handleClose,\n  micropost,\n  open,\n  user\n}) => {\n  _s();\n\n  const {\n    authState\n  } = useContext(AuthContext);\n  const [postState, postDispatch] = useReducer(postReducer, postInitialState); // 投稿内容&そのコメントを取得する\n\n  const Micropost = () => {\n    postDispatch({\n      type: 'fetching'\n    });\n    fetchMicropost(micropost.id).then(data => {\n      postDispatch({\n        type: 'fetchSuccess',\n        payload: {\n          micropost: data.micropost,\n          comments: data.comments,\n          likeStatus: data.likeStatus\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    Micropost();\n  }, [open]);\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: () => handleClose(),\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u30B3\\u30E1\\u30F3\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), postState.fetchState != 'ok' ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 42\n      }, this) : postState.comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment.comment,\n        loginUser: authState.loginUser,\n        userName: comment.user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleClose(),\n        children: \"\\u9589\\u3058\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MicropostDialog, \"L10/ttNWV9pCszJEoGbElmInwo8=\");\n\n_c = MicropostDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"MicropostDialog\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/components/Dialogs/MicropostDialog.jsx"],"names":["React","useContext","useReducer","Button","Dialog","DialogActions","DialogTitle","DialogContent","fetchMicropost","postReducer","postInitialState","Loading","MicropostDialog","handleClose","micropost","open","user","authState","AuthContext","postState","postDispatch","Micropost","type","id","then","data","payload","comments","likeStatus","useEffect","fetchState","map","comment","loginUser","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C,C,CACA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,aAAP,MAA0B,6BAA1B,C,CACA;;AACA,SAASC,cAAT,QAA+B,uBAA/B,C,CACA;;AACA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,2BAA9C,C,CACA;;AACA,SAASC,OAAT,QAAwB,0BAAxB;;AAEA,OAAO,MAAMC,eAAe,GAAG,CAAC;AAC9BC,EAAAA,WAD8B;AAE9BC,EAAAA,SAF8B;AAG9BC,EAAAA,IAH8B;AAI9BC,EAAAA;AAJ8B,CAAD,KAKzB;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAgBhB,UAAU,CAACiB,WAAD,CAAhC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BlB,UAAU,CAACO,WAAD,EAAcC,gBAAd,CAA5C,CAFI,CAGJ;;AACA,QAAMW,SAAS,GAAG,MAAM;AACtBD,IAAAA,YAAY,CAAC;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAZ;AACAd,IAAAA,cAAc,CAACM,SAAS,CAACS,EAAX,CAAd,CACGC,IADH,CACQC,IAAI,IAAI;AACZL,MAAAA,YAAY,CAAC;AACXE,QAAAA,IAAI,EAAE,cADK;AAEXI,QAAAA,OAAO,EAAE;AACPZ,UAAAA,SAAS,EAAEW,IAAI,CAACX,SADT;AAEPa,UAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFR;AAGPC,UAAAA,UAAU,EAAEH,IAAI,CAACG;AAHV;AAFE,OAAD,CAAZ;AAQD,KAVH;AAWD,GAbD;;AAeAC,EAAAA,SAAS,CAAC,MAAM;AACdR,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACN,IAAD,CAFM,CAAT;AAIA,sBACE,QAAC,MAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,OAAO,EAAE,MAAMF,WAAW,EAF5B;AAAA,4BAIE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAJF,eAaE,QAAC,aAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGIM,SAAS,CAACW,UAAV,IAAwB,IAAxB,gBAA+B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAA/B,GACEX,SAAS,CAACQ,QAAV,CAAmBI,GAAnB,CAAuBC,OAAO,iBAC5B,QAAC,OAAD;AACE,QAAA,OAAO,EAAEA,OAAO,CAACA,OADnB;AAEE,QAAA,SAAS,EAAEf,SAAS,CAACgB,SAFvB;AAGE,QAAA,QAAQ,EAAED,OAAO,CAAChB,IAAR,CAAakB;AAHzB;AAAA;AAAA;AAAA;AAAA,cADF,CAJN;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eA0BE,QAAC,aAAD;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAMrB,WAAW,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD,CA9DM;;GAAMD,e;;KAAAA,e","sourcesContent":["import React, { useContext, useReducer } from 'react';\n// Style\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\n// Api\nimport { fetchMicropost } from '../../apis/microposts';\n// Reducer\nimport { postReducer, postInitialState } from '../../reducer/PostReducer'\n// Component\nimport { Loading } from \"../../components/Loading\"\n\nexport const MicropostDialog = ({\n  handleClose,\n  micropost,\n  open,\n  user,\n}) => {\n  const { authState } = useContext(AuthContext);\n  const [postState, postDispatch] = useReducer(postReducer, postInitialState);\n  // 投稿内容&そのコメントを取得する\n  const Micropost = () => {\n    postDispatch({ type: 'fetching' })\n    fetchMicropost(micropost.id)\n      .then(data => {\n        postDispatch({\n          type: 'fetchSuccess',\n          payload: {\n            micropost: data.micropost,\n            comments: data.comments,\n            likeStatus: data.likeStatus,\n          }\n        });\n      });\n  }\n\n  useEffect(() => {\n    Micropost()\n  }, [open]);\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => handleClose()}\n    >\n      <DialogTitle>\n        {/* <Micropost\n          commentCount={postState.comments.length}\n          likeStatus={postState.likeStatus}\n          loginUserId={authState.loginUser.id}\n          micropost={postState.micropost}\n          user={user}\n        /> */}\n      </DialogTitle>\n      <DialogContent>\n        <h3>コメント</h3>\n        {\n          postState.fetchState != 'ok' ? <Loading /> :\n            postState.comments.map(comment =>\n              <Comment\n                comment={comment.comment}\n                loginUser={authState.loginUser}\n                userName={comment.user.name}\n              />\n            )\n        }\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => handleClose()}>\n          閉じる\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}