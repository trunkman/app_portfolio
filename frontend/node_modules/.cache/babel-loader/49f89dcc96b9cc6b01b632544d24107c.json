{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Contact.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Contact = () => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"\\u304A\\u554F\\u3044\\u5408\\u308F\\u305B\\u7A93\\u53E3\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}; // マイクロポスと貼り付け\n// import React, { useState, useEffect } from \"react\";\n// import { BrowserRouter, Switch, Route } from 'react-router-dom'\n// // styled\n// import { Grid } from \"@mui/material\";\n// // api\n// import { fetchUser } from \"../apis/users\";\n// // コンポーネント\n// import { SideProfile } from \"../components/Users/SideProfile\";\n// import { MyProfile } from \"../components/Users/MyProfile\";\n// import { Microposts } from \"../components/Users/Microposts\";\n// import { Following } from \"../components/Users/Following\";\n// import { Followers } from \"../components/Users/Followers\";\n// import { AvatarButton } from \"../components/Navigations/AvatarButton\";\n// export const User = (props) => {\n//   const userId = props.match.params.id\n//   const [user, setUser] = useState('No Name')\n//   const [microposts, setMicroposts] = useState([])\n//   const [following, setFollowing] = useState([])\n//   const [followers, setFollowers] = useState([])\n//   const [isFetching, setIsFetching] = useState(false)\n//   // ユーザー情報の取得\n//   useEffect(() => {\n//     fetchUser({ userId: userId })\n//       .then(data => {\n//         setUser(data.user)\n//         setMicroposts(data.microposts)\n//         setFollowing(data.following)\n//         setFollowers(data.followers)\n//         setIsFetching(false)\n//       })\n//     return () => {\n//       setUser([])\n//       setMicroposts([])\n//       setFollowing([])\n//       setFollowers([])\n//     }\n//   }, [isFetching])\n//   return (\n//     <BrowserRouter>\n//       <Grid container sx={{ maxWidth: 1000, mx: \"auto\", bgcolor: 'grey.300' }}>\n//         {/* <Grid item xs={12} sm={4} sx={{ px: 2, bgcolor: 'grey.100' }}>\n//           <SideProfile\n//             dataFetching={() => setIsFetching(true)}\n//             loginUser={props.loginUser}\n//             isLoggedIn={props.isLoggedIn}\n//             user={user}\n//             microposts={microposts}\n//             following={following}\n//             followers={followers}\n//           />\n//         </Grid> */}\n//         <AvatarButton user={user} size=\"45\" />\n//         <Grid item xs={12} sm={12} sx={{ px: 2, bgcolor: 'grey.100' }}>\n//           <Switch>\n//             <Route exact path={`${props.match.url}`}>\n//               <MyProfile\n//                 dataFetching={() => setIsFetching(true)}\n//                 loginUser={props.loginUser}\n//                 isLoggedIn={props.isLoggedIn}\n//                 user={user}\n//                 microposts={microposts}\n//                 following={following}\n//                 followers={followers}\n//               />\n//             </Route>\n//             <Route path={`${props.match.url}/microposts`}>\n//               <Microposts\n//                 dataFetching={() => setIsFetching(true)}\n//                 loginUser={props.loginUser}\n//                 microposts={microposts}\n//                 userId={user.id}\n//               />\n//             </Route>\n//             <Route path={`${props.match.url}/following`}>\n//               <Following\n//                 dataFetching={() => setIsFetching(true)}\n//                 following={following}\n//                 userId={user.id}\n//               />\n//             </Route>\n//             <Route path={`${props.match.url}/followers`}>\n//               <Followers\n//                 dataFetching={() => setIsFetching(true)}\n//                 followers={followers}\n//                 userId={user.id}\n//               />\n//             </Route>\n//           </Switch>\n//         </Grid>\n//       </Grid>\n//     </BrowserRouter>\n//   )\n// }\n\n_c = Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Contact.jsx"],"names":["React","Contact"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,saA,O","sourcesContent":["import React from \"react\";\n\nexport const Contact = () => {\n  return (\n    <h1>お問い合わせ窓口</h1>\n  )\n}\n\n// マイクロポスと貼り付け\n\n// import React, { useState, useEffect } from \"react\";\n// import { BrowserRouter, Switch, Route } from 'react-router-dom'\n// // styled\n// import { Grid } from \"@mui/material\";\n// // api\n// import { fetchUser } from \"../apis/users\";\n// // コンポーネント\n// import { SideProfile } from \"../components/Users/SideProfile\";\n// import { MyProfile } from \"../components/Users/MyProfile\";\n// import { Microposts } from \"../components/Users/Microposts\";\n// import { Following } from \"../components/Users/Following\";\n// import { Followers } from \"../components/Users/Followers\";\n// import { AvatarButton } from \"../components/Navigations/AvatarButton\";\n\n// export const User = (props) => {\n//   const userId = props.match.params.id\n//   const [user, setUser] = useState('No Name')\n//   const [microposts, setMicroposts] = useState([])\n//   const [following, setFollowing] = useState([])\n//   const [followers, setFollowers] = useState([])\n//   const [isFetching, setIsFetching] = useState(false)\n//   // ユーザー情報の取得\n//   useEffect(() => {\n//     fetchUser({ userId: userId })\n//       .then(data => {\n//         setUser(data.user)\n//         setMicroposts(data.microposts)\n//         setFollowing(data.following)\n//         setFollowers(data.followers)\n//         setIsFetching(false)\n//       })\n//     return () => {\n//       setUser([])\n//       setMicroposts([])\n//       setFollowing([])\n//       setFollowers([])\n//     }\n//   }, [isFetching])\n\n//   return (\n//     <BrowserRouter>\n//       <Grid container sx={{ maxWidth: 1000, mx: \"auto\", bgcolor: 'grey.300' }}>\n//         {/* <Grid item xs={12} sm={4} sx={{ px: 2, bgcolor: 'grey.100' }}>\n//           <SideProfile\n//             dataFetching={() => setIsFetching(true)}\n//             loginUser={props.loginUser}\n//             isLoggedIn={props.isLoggedIn}\n//             user={user}\n//             microposts={microposts}\n//             following={following}\n//             followers={followers}\n//           />\n//         </Grid> */}\n//         <AvatarButton user={user} size=\"45\" />\n//         <Grid item xs={12} sm={12} sx={{ px: 2, bgcolor: 'grey.100' }}>\n//           <Switch>\n//             <Route exact path={`${props.match.url}`}>\n//               <MyProfile\n//                 dataFetching={() => setIsFetching(true)}\n//                 loginUser={props.loginUser}\n//                 isLoggedIn={props.isLoggedIn}\n//                 user={user}\n//                 microposts={microposts}\n//                 following={following}\n//                 followers={followers}\n//               />\n//             </Route>\n\n//             <Route path={`${props.match.url}/microposts`}>\n//               <Microposts\n//                 dataFetching={() => setIsFetching(true)}\n//                 loginUser={props.loginUser}\n//                 microposts={microposts}\n//                 userId={user.id}\n//               />\n//             </Route>\n\n\n//             <Route path={`${props.match.url}/following`}>\n//               <Following\n//                 dataFetching={() => setIsFetching(true)}\n//                 following={following}\n//                 userId={user.id}\n//               />\n//             </Route>\n\n//             <Route path={`${props.match.url}/followers`}>\n//               <Followers\n//                 dataFetching={() => setIsFetching(true)}\n//                 followers={followers}\n//                 userId={user.id}\n//               />\n//             </Route>\n//           </Switch>\n\n//         </Grid>\n//       </Grid>\n//     </BrowserRouter>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}