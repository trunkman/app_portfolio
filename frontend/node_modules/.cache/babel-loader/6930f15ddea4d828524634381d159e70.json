{"ast":null,"code":"// import React, { createContext, useState, useEffect } from \"react\";\n// import { fetchLoggedIn } from \"../apis/sessions\";\n// export const AuthContext = createContext()\n// export const AuthContextProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loginUser, setLoginUser] = useState({});\n//   // ログイン&ログアウト実行のコールバック関数\n//   const handleLogIn = (loginUser) => {\n//     setIsLoggedIn(true);\n//     setLoginUser(loginUser);\n//   }\n//   const handleLogOut = () => {\n//     setIsLoggedIn(false);\n//     setLoginUser({});\n//   }\n//   // ログイン状態を保持する\n//   useEffect(() => {\n//     fetchLoggedIn()\n//       .then(data => {\n//         if (data.logged_in && isLoggedIn === false) {\n//           handleLogIn(data.user)\n//         } else if (!data.logged_in && isLoggedIn === true) {\n//           handleLogOut()\n//         }\n//       })\n//   }, [])\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         isLoggedIn,\n//         loginUser,\n//         handleLogIn,\n//         handleLogOut,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   )\n// }","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/context/AuthContext.jsx"],"names":[],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { createContext, useState, useEffect } from \"react\";\n// import { fetchLoggedIn } from \"../apis/sessions\";\n\n// export const AuthContext = createContext()\n\n// export const AuthContextProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loginUser, setLoginUser] = useState({});\n\n//   // ログイン&ログアウト実行のコールバック関数\n//   const handleLogIn = (loginUser) => {\n//     setIsLoggedIn(true);\n//     setLoginUser(loginUser);\n//   }\n//   const handleLogOut = () => {\n//     setIsLoggedIn(false);\n//     setLoginUser({});\n//   }\n//   // ログイン状態を保持する\n//   useEffect(() => {\n//     fetchLoggedIn()\n//       .then(data => {\n//         if (data.logged_in && isLoggedIn === false) {\n//           handleLogIn(data.user)\n//         } else if (!data.logged_in && isLoggedIn === true) {\n//           handleLogOut()\n//         }\n//       })\n//   }, [])\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         isLoggedIn,\n//         loginUser,\n//         handleLogIn,\n//         handleLogOut,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}