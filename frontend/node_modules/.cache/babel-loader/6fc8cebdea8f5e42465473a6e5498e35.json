{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/App.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css'; // styles\n\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline'; // api\n\nimport { fetchLoggedIn } from './apis/sessions'; // コンテイナー\n\nimport { Home } from './containers/Home';\nimport { User } from './containers/User';\nimport { Users } from './containers/Users';\nimport { Contact } from './containers/Contact'; // コンポーネント\n\nimport { Header } from \"./components/Header\";\nimport { MiniDrawer } from './containers/MiniDrawer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [loginUser, setLoginUser] = useState({});\n  // const [openLogInDialog, setOpenLogInDialog] = useState(false)\n  // // ログイン実行のコールバック関数\n  // const handleLogIn = (loginUser) => {\n  //   setIsLoggedIn(true);\n  //   setLoginUser(loginUser);\n  // }\n  // // ログアウト実行のコールバック関数\n  // const handleLogOut = () => {\n  //   setIsLoggedIn(false);\n  //   setLoginUser({});\n  // }\n  // // ログインDialogを開閉する関数群\n  // const handleOpenLogIn = () => setOpenLogInDialog(true)\n  // const handleCloseLogIn = () => setOpenLogInDialog(false)\n  // // ログイン状態を保持する\n  // useEffect(() => {\n  //   fetchLoggedIn()\n  //     .then(data => {\n  //       if (data.logged_in && isLoggedIn === false) {\n  //         handleLogIn(data.user)\n  //       } else if (!data.logged_in && isLoggedIn === true) {\n  //         handleLogOut()\n  //       }\n  //     })\n  // }, [isLoggedIn])\n  return (\n    /*#__PURE__*/\n    // <BrowserRouter>\n    _jsxDEV(Box, {\n      sx: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MiniDrawer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this) // </BrowserRouter>\n\n  );\n}\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/App.jsx"],"names":["React","useState","useEffect","BrowserRouter","Switch","Route","Box","CssBaseline","fetchLoggedIn","Home","User","Users","Contact","Header","MiniDrawer","App","display"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CACA;;AACA,SAASC,aAAT,QAA8B,iBAA9B,C,CACA;;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,OAAT,QAAwB,sBAAxB,C,CACA;;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACE;AACA,YAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAT;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CAiDE;;AAjDF;AAmDD;KAhFuBD,G","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport './App.css';\n// styles\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\n// api\nimport { fetchLoggedIn } from './apis/sessions';\n// コンテイナー\nimport { Home } from './containers/Home'\nimport { User } from './containers/User'\nimport { Users } from './containers/Users'\nimport { Contact } from './containers/Contact';\n// コンポーネント\nimport { Header } from \"./components/Header\"\nimport { MiniDrawer } from './containers/MiniDrawer';\n\nexport default function App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [loginUser, setLoginUser] = useState({});\n  // const [openLogInDialog, setOpenLogInDialog] = useState(false)\n  // // ログイン実行のコールバック関数\n  // const handleLogIn = (loginUser) => {\n  //   setIsLoggedIn(true);\n  //   setLoginUser(loginUser);\n  // }\n  // // ログアウト実行のコールバック関数\n  // const handleLogOut = () => {\n  //   setIsLoggedIn(false);\n  //   setLoginUser({});\n  // }\n  // // ログインDialogを開閉する関数群\n  // const handleOpenLogIn = () => setOpenLogInDialog(true)\n  // const handleCloseLogIn = () => setOpenLogInDialog(false)\n  // // ログイン状態を保持する\n  // useEffect(() => {\n  //   fetchLoggedIn()\n  //     .then(data => {\n  //       if (data.logged_in && isLoggedIn === false) {\n  //         handleLogIn(data.user)\n  //       } else if (!data.logged_in && isLoggedIn === true) {\n  //         handleLogOut()\n  //       }\n  //     })\n  // }, [isLoggedIn])\n\n  return (\n    // <BrowserRouter>\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <MiniDrawer />\n      {/* <Header\n        handleCloseLogIn={handleCloseLogIn}\n        handleLogOut={handleLogOut}\n        handleLogIn={handleLogIn}\n        handleOpenLogIn={handleOpenLogIn}\n        isLoggedIn={isLoggedIn}\n        open={openLogInDialog}\n        loginUser={loginUser}\n      /> */}\n      {/* <Switch>\n          <Route exact path=\"/\">\n            <Home\n              handleCloseLogIn={handleCloseLogIn}\n              handleLogOut={handleLogOut}\n              handleLogIn={handleLogIn}\n              handleOpenLogIn={handleOpenLogIn}\n              isLoggedIn={isLoggedIn}\n              open={openLogInDialog}\n            />\n          </Route>\n          <Route path=\"/users/:id\"\n            render={({ match }) =>\n              <User\n                handleLogOut={handleLogOut}\n                handleLogIn={handleLogIn}\n                isLoggedIn={isLoggedIn}\n                match={match}\n                loginUser={loginUser}\n              />\n            }\n          />\n          <Route exact path=\"/users\">\n            <Users\n              handleLogOut={handleLogOut}\n              handleLogIn={handleLogIn}\n              isLoggedIn={isLoggedIn}\n              user={loginUser}\n            />\n          </Route>\n          <Route exact path=\"/contact\">\n            <Contact />\n          </Route>\n        </Switch> */}\n    </Box>\n    // </BrowserRouter>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}