{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Microposts.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Link from '@mui/material/Link'; // styled\n\nimport { ListItemAvatar, Typography } from \"@mui/material\";\nimport ListItem from \"@mui/material/ListItem\";\nimport List from '@mui/material/List';\nimport ListItemText from '@mui/material/ListItemText';\nimport Grid from \"@mui/material/Grid\"; // アイコン\n\nimport AccountCircle from \"@mui/icons-material/AccountCircle\"; // api\n\nimport { deleteMicropost } from \"../../apis/microposts\";\nimport { deleteComment } from \"../../apis/comments\";\nimport { fetchMicroposts } from \"../../apis/users\"; // コンポーネント\n\nimport { LikeButton } from \"../../components/Buttons/LikeButton\";\nimport { CommentButton } from \"../../components/Buttons/CommentButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Microposts = props => {\n  _s();\n\n  const [microposts, setMicroposts] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [likedMicropostIds, setLikedMicropostIds] = useState([]); // 投稿一覧を取得する\n\n  useEffect(() => {\n    fetchMicroposts({\n      userId: props.userId\n    }).then(data => {\n      setMicroposts(data.microposts);\n      setComments(data.comments);\n      setLikedMicropostIds(data.liked_micropost_ids);\n    });\n    return () => setMicroposts([]);\n  }, []); // 投稿を削除する（投稿者のみ実行可能）\n\n  const deleteSubmit = micropostId => {\n    deleteMicropost(micropostId); //     .then(props.dataFetching())\n  }; // コメントを削除する（投稿者のみ実行可能）\n\n\n  const deleteCommentSubmit = commentId => {\n    deleteComment(commentId); //     .then(props.dataFetching())\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u6295\\u7A3F\\u4E00\\u89A7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [microposts.length, \" \\u3064\\u3076\\u3084\\u304D\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [comments.length, \" \\u30B3\\u30E1\\u30F3\\u30C8\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        width: '100%',\n        bgcolor: 'background.paper'\n      },\n      children: [microposts.map(micropost => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(AccountCircle, {\n            sx: {\n              fontSize: 40\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          component: \"div\",\n          primary: micropost.id,\n          secondary: micropost.created_at\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this), props.loginUser.id === micropost.user_id && /*#__PURE__*/_jsxDEV(Link, {\n          component: \"div\",\n          onClick: () => deleteSubmit(micropost.id),\n          children: \"delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          pl: 2,\n          children: micropost.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n          loginUserId: props.loginUser.id,\n          micropostId: micropost.id,\n          likedStatus: likedMicropostIds.includes(micropost.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CommentButton, {\n          loginUserId: props.loginUser.id,\n          micropostId: micropost.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)]\n      }, micropost.id.toString(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)), comments.map(comment => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(AccountCircle, {\n            sx: {\n              fontSize: 40\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          component: \"div\",\n          primary: comment.id,\n          secondary: comment.created_at\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this), props.loginUser.id === comment.user_id && /*#__PURE__*/_jsxDEV(Link, {\n          component: \"div\",\n          onClick: () => deleteCommentSubmit(comment.id),\n          children: \"delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          pl: 2,\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n          loginUserId: props.loginUser.id,\n          micropostId: comment.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CommentButton, {\n          loginUserId: props.loginUser.id,\n          micropostId: comment.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Microposts, \"ytjrQKo81fOBjFAihCuqHCNLXyk=\");\n\n_c = Microposts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Microposts\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Microposts.jsx"],"names":["React","useState","useEffect","Link","ListItemAvatar","Typography","ListItem","List","ListItemText","Grid","AccountCircle","deleteMicropost","deleteComment","fetchMicroposts","LikeButton","CommentButton","Microposts","props","microposts","setMicroposts","comments","setComments","likedMicropostIds","setLikedMicropostIds","userId","then","data","liked_micropost_ids","deleteSubmit","micropostId","deleteCommentSubmit","commentId","length","width","bgcolor","map","micropost","fontSize","id","created_at","loginUser","user_id","content","includes","toString","comment"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Link from '@mui/material/Link';\n// styled\nimport { ListItemAvatar, Typography } from \"@mui/material\";\nimport ListItem from \"@mui/material/ListItem\";\nimport List from '@mui/material/List';\nimport ListItemText from '@mui/material/ListItemText';\nimport Grid from \"@mui/material/Grid\";\n// アイコン\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\n// api\nimport { deleteMicropost } from \"../../apis/microposts\";\nimport { deleteComment } from \"../../apis/comments\";\nimport { fetchMicroposts } from \"../../apis/users\";\n// コンポーネント\nimport { LikeButton } from \"../../components/Buttons/LikeButton\";\nimport { CommentButton } from \"../../components/Buttons/CommentButton\"\n\nexport const Microposts = (props) => {\n  const [microposts, setMicroposts] = useState([])\n  const [comments, setComments] = useState([])\n  const [likedMicropostIds, setLikedMicropostIds] = useState([])\n  // 投稿一覧を取得する\n  useEffect(() => {\n    fetchMicroposts({ userId: props.userId })\n      .then(data => {\n        setMicroposts(data.microposts)\n        setComments(data.comments)\n        setLikedMicropostIds(data.liked_micropost_ids)\n      })\n    return () => setMicroposts([])\n  }, [])\n  // 投稿を削除する（投稿者のみ実行可能）\n  const deleteSubmit = (micropostId) => {\n    deleteMicropost(micropostId)\n    //     .then(props.dataFetching())\n  }\n  // コメントを削除する（投稿者のみ実行可能）\n  const deleteCommentSubmit = (commentId) => {\n    deleteComment(commentId)\n    //     .then(props.dataFetching())\n  }\n\n  return (\n    <>\n      <Grid item>\n        <h2>投稿一覧</h2>\n        <p>{microposts.length} つぶやき</p>\n        <p>{comments.length} コメント</p>\n      </Grid>\n      <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n        {\n          microposts.map(micropost =>\n            <ListItem key={micropost.id.toString()}>\n              <ListItemAvatar>\n                <AccountCircle sx={{ fontSize: 40 }} />\n              </ListItemAvatar>\n              <ListItemText\n                component=\"div\"\n                primary={micropost.id}\n                secondary={micropost.created_at}\n              />\n              {props.loginUser.id === micropost.user_id && (\n                <Link component=\"div\" onClick={() => deleteSubmit(micropost.id)}>\n                  delete\n                </Link>\n              )}\n              <Typography variant=\"body1\" pl={2}>\n                {micropost.content}\n              </Typography>\n              <LikeButton\n                loginUserId={props.loginUser.id}\n                micropostId={micropost.id}\n                likedStatus={likedMicropostIds.includes(micropost.id)}\n              />\n              <CommentButton\n                loginUserId={props.loginUser.id}\n                micropostId={micropost.id}\n              />\n            </ListItem >\n          )\n        }\n\n        {\n          comments.map(comment =>\n            <ListItem key={comment.id}>\n              <ListItemAvatar>\n                <AccountCircle sx={{ fontSize: 40 }} />\n              </ListItemAvatar>\n              <ListItemText\n                component=\"div\"\n                primary={comment.id}\n                secondary={comment.created_at}\n              />\n              {props.loginUser.id === comment.user_id && (\n                <Link component=\"div\" onClick={() => deleteCommentSubmit(comment.id)}>\n                  delete\n                </Link>\n              )}\n              <Typography variant=\"body1\" pl={2}>\n                {comment.content}\n              </Typography>\n              <LikeButton\n                loginUserId={props.loginUser.id}\n                micropostId={comment.id}\n              />\n              <CommentButton\n                loginUserId={props.loginUser.id}\n                micropostId={comment.id}\n              />\n            </ListItem >\n          )\n        }\n      </List>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}