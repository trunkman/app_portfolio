{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/MessageRoom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // styles\n\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@mui/material/List\";\nimport ListItemText from \"@mui/material/ListItemText\"; // api\n\nimport { fetchMessages } from \"../../apis/rooms\"; // reducer\n\nimport { dataInitialState, dataReducer } from '../../reducer/DataFetchReducer'; // コンテイナー\n\nimport { Message } from \"../../components/Messages/Message\"; // コンポーネント\n\nimport { Chat } from \"../../components/Messages/Chat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => createStyles({\n  \"messages\": {\n    height: \"400px\",\n    padding: \"0\",\n    overflow: \"auto\"\n  }\n}));\nexport const MessageRoom = props => {\n  _s();\n\n  const roomId = props.match.params.id;\n  const classes = useStyles();\n  const [messages, setMessages] = useState([]);\n  const [dataState, dispatch] = useReducer(dataReducer, dataState);\n\n  const handleFetch = () => dataDispatch({\n    type: 'messages'\n  });\n\n  const handleComplete = () => dataDispatch({\n    type: 'complete'\n  }); // ルームのメッセージ一覧を取得する\n\n\n  useEffect(() => {\n    fetchMessages({\n      roomId: roomId\n    }).then(data => setMessages(data.messages));\n    return () => setMessages([]);\n  }, [dataState.messages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: props.loginUser.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      className: classes.messages,\n      id: \"scroll-area\",\n      children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(ListItemText, {\n        children: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this) : messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: message.content,\n        roomId: roomId,\n        loginUserId: props.loginUser.id\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u30C8\\u30FC\\u30AF\\u3092\\u5165\\u529B\\u3059\\u308B\\u7B87\\u6240\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      user_id: props.loginUser.id,\n      room_id: roomId,\n      handleFetch: handleFetch,\n      handleComplete: handleComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MessageRoom, \"TrPhDNap40t7JgBHpBwZm8UTeOo=\", false, function () {\n  return [useStyles];\n});\n\n_c = MessageRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageRoom\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/MessageRoom.jsx"],"names":["React","useState","useEffect","createStyles","makeStyles","List","ListItemText","fetchMessages","dataInitialState","dataReducer","Message","Chat","useStyles","height","padding","overflow","MessageRoom","props","roomId","match","params","id","classes","messages","setMessages","dataState","dispatch","useReducer","handleFetch","dataDispatch","type","handleComplete","then","data","loginUser","name","length","map","message","index","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,0BAAzC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,YAAP,MAAyB,4BAAzB,C,CACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,gCAA9C,C,CACA;;AACA,SAASC,OAAT,QAAwB,mCAAxB,C,CACA;;AACA,SAASC,IAAT,QAAqB,gCAArB;;;AAEA,MAAMC,SAAS,GAAGR,UAAU,CAAC,MAC3BD,YAAY,CAAC;AACX,cAAY;AACVU,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,OAAO,EAAE,GAFC;AAGVC,IAAAA,QAAQ,EAAE;AAHA;AADD,CAAD,CADc,CAA5B;AAUA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AACpC,QAAMC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,EAAlC;AACA,QAAMC,OAAO,GAAGV,SAAS,EAAzB;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACwB,SAAD,EAAYC,QAAZ,IAAwBC,UAAU,CAAClB,WAAD,EAAcgB,SAAd,CAAxC;;AACA,QAAMG,WAAW,GAAG,MAAMC,YAAY,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAtC;;AACA,QAAMC,cAAc,GAAG,MAAMF,YAAY,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAzC,CANoC,CAOpC;;;AACA5B,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,aAAa,CAAC;AAAEW,MAAAA,MAAM,EAAEA;AAAV,KAAD,CAAb,CACGc,IADH,CACQC,IAAI,IAAIT,WAAW,CAACS,IAAI,CAACV,QAAN,CAD3B;AAEA,WAAO,MAAMC,WAAW,CAAC,EAAD,CAAxB;AACD,GAJQ,EAIN,CAACC,SAAS,CAACF,QAAX,CAJM,CAAT;AAMA,sBACE;AAAA,4BACE;AAAA,gBAAKN,KAAK,CAACiB,SAAN,CAAgBC;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEb,OAAO,CAACC,QAAzB;AAAmC,MAAA,EAAE,EAAE,aAAvC;AAAA,gBACGA,QAAQ,CAACa,MAAT,KAAoB,CAApB,gBACC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,GAKCb,QAAQ,CAACc,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,kBACX,QAAC,OAAD;AACE,QAAA,IAAI,EAAED,OAAO,CAACE,OADhB;AAGE,QAAA,MAAM,EAAEtB,MAHV;AAIE,QAAA,WAAW,EAAED,KAAK,CAACiB,SAAN,CAAgBb;AAJ/B,SAEOkB,KAFP;AAAA;AAAA;AAAA;AAAA,cADF;AANJ;AAAA;AAAA;AAAA;AAAA,YAFF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF,eAsBE,QAAC,IAAD;AACE,MAAA,OAAO,EAAEtB,KAAK,CAACiB,SAAN,CAAgBb,EAD3B;AAEE,MAAA,OAAO,EAAEH,MAFX;AAGE,MAAA,WAAW,EAAEU,WAHf;AAIE,MAAA,cAAc,EAAEG;AAJlB;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA,kBADF;AA+BD,CA7CM;;GAAMf,W;UAEKJ,S;;;KAFLI,W","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// styles\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@mui/material/List\";\nimport ListItemText from \"@mui/material/ListItemText\";\n// api\nimport { fetchMessages } from \"../../apis/rooms\"\n// reducer\nimport { dataInitialState, dataReducer } from '../../reducer/DataFetchReducer'\n// コンテイナー\nimport { Message } from \"../../components/Messages/Message\";\n// コンポーネント\nimport { Chat } from \"../../components/Messages/Chat\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    \"messages\": {\n      height: \"400px\",\n      padding: \"0\",\n      overflow: \"auto\"\n    }\n  }),\n);\n\nexport const MessageRoom = (props) => {\n  const roomId = props.match.params.id\n  const classes = useStyles();\n  const [messages, setMessages] = useState([])\n  const [dataState, dispatch] = useReducer(dataReducer, dataState)\n  const handleFetch = () => dataDispatch({ type: 'messages' })\n  const handleComplete = () => dataDispatch({ type: 'complete' })\n  // ルームのメッセージ一覧を取得する\n  useEffect(() => {\n    fetchMessages({ roomId: roomId })\n      .then(data => setMessages(data.messages))\n    return () => setMessages([])\n  }, [dataState.messages])\n\n  return (\n    <>\n      <h3>{props.loginUser.name}</h3>\n      <List className={classes.messages} id={\"scroll-area\"}>\n        {messages.length === 0 ? (\n          <ListItemText>\n            メッセージはありません\n          </ListItemText>\n        ) : (\n          messages.map((message, index) =>\n            <Message\n              text={message.content}\n              key={index}\n              roomId={roomId}\n              loginUserId={props.loginUser.id}\n            />\n          )\n        )\n        }\n      </List>\n      <p>\n        トークを入力する箇所\n      </p>\n      <Chat\n        user_id={props.loginUser.id}\n        room_id={roomId}\n        handleFetch={handleFetch}\n        handleComplete={handleComplete}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}