{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Timeline.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport Link from '@mui/material/Link'; // styled\n\nimport { ListItemAvatar, Typography } from \"@mui/material\";\nimport ListItem from \"@mui/material/ListItem\";\nimport List from '@mui/material/List';\nimport ListItemText from '@mui/material/ListItemText';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button'; // アイコン\n\nimport AccountCircle from \"@mui/icons-material/AccountCircle\"; // api\n\nimport { deleteMicropost } from \"../../apis/microposts\";\nimport { deleteComment } from \"../../apis/comments\";\nimport { fetchMicroposts } from \"../../apis/users\"; // reducer\n\nimport { dataInitialState, dataReducer } from '../../reducer/DataReducer';\nimport { dialogInitialState, dialogReducer } from '../../reducer/DialogReducer'; // Presentational Cpmponent\n\nimport { LikeButton } from \"../../components/Buttons/LikeButton\";\nimport { CommentButton } from \"../../components/Buttons/CommentButton\";\nimport { Micropost } from \"../../components/Lists/Micropost\";\nimport { MicropostDialog } from \"../../components/Dialogs/MicropostDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Timeline = ({\n  userId,\n  loginUser\n}) => {\n  _s();\n\n  const [microposts, setMicroposts] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [likedMicropostIds, setLikedMicropostIds] = useState([]);\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState);\n  const [openState, openDispatch] = useReducer(dialogReducer, dialogInitialState);\n\n  const dataFetching = () => dataDispatch({\n    type: 'microposts'\n  });\n\n  const handleOpen = () => openDispatch({\n    type: 'micropost'\n  });\n\n  const handleClose = () => openDispatch({\n    type: 'close'\n  }); // 投稿を削除する（投稿者のみ実行可能）\n\n\n  const deleteSubmit = micropostId => {\n    deleteMicropost(micropostId).then(dataFetching);\n  }; // コメントを削除する（投稿者のみ実行可能）\n\n\n  const deleteCommentSubmit = commentId => {\n    deleteComment(commentId).then(dataFetching);\n  }; // 投稿一覧を取得する\n\n\n  useEffect(() => {\n    fetchMicroposts({\n      userId: userId\n    }).then(data => {\n      setMicroposts(data.microposts);\n      setComments(data.comments);\n      setLikedMicropostIds(data.liked_micropost_ids);\n      dataDispatch({\n        type: 'complete'\n      });\n    });\n    return () => setMicroposts([]);\n  }, [dataState.microposts]); // いいね情報を取得する\n\n  useEffect(() => dataFetching(), []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        bgcolor: 'background.paper'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u6295\\u7A3F\\u4E00\\u89A7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [microposts.length, \" \\u3064\\u3076\\u3084\\u304D : \", comments.length, \" \\u30B3\\u30E1\\u30F3\\u30C8\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleOpen,\n        children: \"\\u6295\\u7A3F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MicropostDialog, {\n        handleClose: handleClose,\n        open: openState.micropost,\n        user: loginUser,\n        dataFetching: dataFetching\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), microposts.map(micropost => /*#__PURE__*/_jsxDEV(Micropost, {\n        micropost: micropost,\n        loginUserId: loginUser.id,\n        likedStatus: likedMicropostIds.includes(micropost.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this) // <ListItem key={micropost.id.toString()}>\n      //   <ListItemAvatar>\n      //     <AccountCircle sx={{ fontSize: 40 }} />\n      //   </ListItemAvatar>\n      //   <ListItemText\n      //     component=\"div\"\n      //     primary={micropost.id}\n      //     secondary={micropost.created_at}\n      //   />\n      //   {loginUser.id === micropost.user_id && (\n      //     <Link component=\"div\" onClick={() => deleteSubmit(micropost.id)}>\n      //       delete\n      //     </Link>\n      //   )}\n      //   <Typography variant=\"body1\" pl={2}>\n      //     {micropost.content}\n      //   </Typography>\n      //   <LikeButton\n      //     loginUserId={loginUser.id}\n      //     micropostId={micropost.id}\n      //     likedStatus={likedMicropostIds.includes(micropost.id)}\n      //   />\n      //   <CommentButton\n      //     loginUserId={loginUser.id}\n      //     micropostId={micropost.id}\n      //   />\n      // </ListItem >\n      ), comments.map(comment => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(AccountCircle, {\n            sx: {\n              fontSize: 40\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          component: \"div\",\n          primary: comment.id,\n          secondary: comment.created_at\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this), loginUser.id === comment.user_id && /*#__PURE__*/_jsxDEV(Link, {\n          component: \"div\",\n          onClick: () => deleteCommentSubmit(comment.id),\n          children: \"delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          pl: 2,\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n          loginUserId: loginUser.id,\n          micropostId: comment.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CommentButton, {\n          loginUserId: loginUser.id,\n          micropostId: comment.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timeline, \"3Z2BhrHOcHfGbNpkyuCl4JgD4lw=\");\n\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Timeline.jsx"],"names":["React","useState","useEffect","useReducer","Link","ListItemAvatar","Typography","ListItem","List","ListItemText","Box","Button","AccountCircle","deleteMicropost","deleteComment","fetchMicroposts","dataInitialState","dataReducer","dialogInitialState","dialogReducer","LikeButton","CommentButton","Micropost","MicropostDialog","Timeline","userId","loginUser","microposts","setMicroposts","comments","setComments","likedMicropostIds","setLikedMicropostIds","dataState","dataDispatch","openState","openDispatch","dataFetching","type","handleOpen","handleClose","deleteSubmit","micropostId","then","deleteCommentSubmit","commentId","data","liked_micropost_ids","bgcolor","length","micropost","map","id","includes","comment","fontSize","created_at","user_id","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport Link from '@mui/material/Link';\n// styled\nimport { ListItemAvatar, Typography } from \"@mui/material\";\nimport ListItem from \"@mui/material/ListItem\";\nimport List from '@mui/material/List';\nimport ListItemText from '@mui/material/ListItemText';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\n// アイコン\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\n// api\nimport { deleteMicropost } from \"../../apis/microposts\";\nimport { deleteComment } from \"../../apis/comments\";\nimport { fetchMicroposts } from \"../../apis/users\";\n// reducer\nimport { dataInitialState, dataReducer } from '../../reducer/DataReducer';\nimport { dialogInitialState, dialogReducer } from '../../reducer/DialogReducer';\n// Presentational Cpmponent\nimport { LikeButton } from \"../../components/Buttons/LikeButton\";\nimport { CommentButton } from \"../../components/Buttons/CommentButton\"\nimport { Micropost } from \"../../components/Lists/Micropost\";\nimport { MicropostDialog } from \"../../components/Dialogs/MicropostDialog\";\n\nexport const Timeline = ({ userId, loginUser }) => {\n  const [microposts, setMicroposts] = useState([])\n  const [comments, setComments] = useState([])\n  const [likedMicropostIds, setLikedMicropostIds] = useState([])\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState)\n  const [openState, openDispatch] = useReducer(dialogReducer, dialogInitialState)\n\n  const dataFetching = () => dataDispatch({ type: 'microposts' })\n  const handleOpen = () => openDispatch({ type: 'micropost' })\n  const handleClose = () => openDispatch({ type: 'close' })\n  // 投稿を削除する（投稿者のみ実行可能）\n  const deleteSubmit = (micropostId) => {\n    deleteMicropost(micropostId)\n      .then(dataFetching)\n  }\n  // コメントを削除する（投稿者のみ実行可能）\n  const deleteCommentSubmit = (commentId) => {\n    deleteComment(commentId)\n      .then(dataFetching)\n  }\n\n  // 投稿一覧を取得する\n  useEffect(() => {\n    fetchMicroposts({ userId: userId })\n      .then(data => {\n        setMicroposts(data.microposts)\n        setComments(data.comments)\n        setLikedMicropostIds(data.liked_micropost_ids)\n        dataDispatch({ type: 'complete' })\n      })\n    return () => setMicroposts([])\n  }, [dataState.microposts])\n\n  // いいね情報を取得する\n  useEffect(() => dataFetching(), [])\n\n  return (\n    <Box>\n      <List sx={{ bgcolor: 'background.paper' }}>\n        <h2>投稿一覧</h2>\n        <p>{microposts.length} つぶやき : {comments.length} コメント</p>\n        <Button variant=\"contained\" onClick={handleOpen}>\n          投稿\n        </Button>\n        <MicropostDialog\n          handleClose={handleClose}\n          open={openState.micropost}\n          user={loginUser}\n          dataFetching={dataFetching}\n        />\n        {\n          microposts.map(micropost =>\n            <Micropost\n              micropost={micropost}\n              loginUserId={loginUser.id}\n              likedStatus={likedMicropostIds.includes(micropost.id)}\n            />\n            // <ListItem key={micropost.id.toString()}>\n            //   <ListItemAvatar>\n            //     <AccountCircle sx={{ fontSize: 40 }} />\n            //   </ListItemAvatar>\n            //   <ListItemText\n            //     component=\"div\"\n            //     primary={micropost.id}\n            //     secondary={micropost.created_at}\n            //   />\n            //   {loginUser.id === micropost.user_id && (\n            //     <Link component=\"div\" onClick={() => deleteSubmit(micropost.id)}>\n            //       delete\n            //     </Link>\n            //   )}\n            //   <Typography variant=\"body1\" pl={2}>\n            //     {micropost.content}\n            //   </Typography>\n            //   <LikeButton\n            //     loginUserId={loginUser.id}\n            //     micropostId={micropost.id}\n            //     likedStatus={likedMicropostIds.includes(micropost.id)}\n            //   />\n            //   <CommentButton\n            //     loginUserId={loginUser.id}\n            //     micropostId={micropost.id}\n            //   />\n            // </ListItem >\n          )\n        }\n\n        {\n          comments.map(comment =>\n            <ListItem key={comment.id}>\n              <ListItemAvatar>\n                <AccountCircle sx={{ fontSize: 40 }} />\n              </ListItemAvatar>\n              <ListItemText\n                component=\"div\"\n                primary={comment.id}\n                secondary={comment.created_at}\n              />\n              {loginUser.id === comment.user_id && (\n                <Link component=\"div\" onClick={() => deleteCommentSubmit(comment.id)}>\n                  delete\n                </Link>\n              )}\n              <Typography variant=\"body1\" pl={2}>\n                {comment.content}\n              </Typography>\n              <LikeButton\n                loginUserId={loginUser.id}\n                micropostId={comment.id}\n              />\n              <CommentButton\n                loginUserId={loginUser.id}\n                micropostId={comment.id}\n              />\n            </ListItem >\n          )\n        }\n      </List>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}