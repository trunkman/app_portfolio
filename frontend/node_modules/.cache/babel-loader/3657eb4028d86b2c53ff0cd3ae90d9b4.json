{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/TalkRoom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\"; // styles\n\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@mui/material/List\";\nimport ListItemText from \"@mui/material/ListItemText\"; // api\n\nimport { fetchMessages } from \"../../apis/rooms\"; // reducer\n\nimport { dataInitialState, dataReducer } from '../../reducer/DataReducer';\nimport { messageInitialState, messageReducer } from '../../reducer/MessageReducer'; // Cpmponent\n\nimport { Chat } from \"../../components/Forms/Chat\";\nimport { Message } from \"../../components/Lists/Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => createStyles({\n  \"messages\": {\n    height: \"400px\",\n    padding: \"0\",\n    overflow: \"auto\"\n  }\n}));\nexport const TalkRoom = ({\n  match,\n  loginUser\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const roomId = match.params.id;\n  const [messageState, messageDispatch] = useReducer(messageReducer, messageInitialState); // トークルームのメッセージ一覧を取得する\n\n  const Messages = () => {\n    fetchMessages(roomId).then(data => {\n      roomDispatch({\n        type: fetchSuccess,\n        payload: data.messages\n      });\n    });\n  };\n\n  useEffect(() => Messages(), [messageState.reRender]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: loginUser.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      className: classes.messages,\n      id: \"scroll-area\",\n      children: messageState.messages.length === 0 ? /*#__PURE__*/_jsxDEV(ListItemText, {\n        children: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : messageState.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: message.content,\n        roomId: roomId,\n        loginUserId: loginUser.id\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u30C8\\u30FC\\u30AF\\u3092\\u5165\\u529B\\u3059\\u308B\\u7B87\\u6240\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      user_id: loginUser.id,\n      room_id: roomId,\n      dataFetch: () => messageDispatch({\n        type: 'fetching'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TalkRoom, \"rZr6H4yHzpBwoKfri/SkrOelCVM=\", false, function () {\n  return [useStyles];\n});\n\n_c = TalkRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"TalkRoom\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/TalkRoom.jsx"],"names":["React","useState","useEffect","useReducer","createStyles","makeStyles","List","ListItemText","fetchMessages","dataInitialState","dataReducer","messageInitialState","messageReducer","Chat","Message","useStyles","height","padding","overflow","TalkRoom","match","loginUser","classes","roomId","params","id","messageState","messageDispatch","Messages","then","data","roomDispatch","type","fetchSuccess","payload","messages","reRender","name","length","map","message","index","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD,C,CACA;;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,0BAAzC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,YAAP,MAAyB,4BAAzB,C,CACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,2BAA9C;AACA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,8BAApD,C,CACA;;AACA,SAASC,IAAT,QAAqB,6BAArB;AACA,SAASC,OAAT,QAAwB,gCAAxB;;;AAEA,MAAMC,SAAS,GAAGV,UAAU,CAAC,MAC3BD,YAAY,CAAC;AACX,cAAY;AACVY,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,OAAO,EAAE,GAFC;AAGVC,IAAAA,QAAQ,EAAE;AAHA;AADD,CAAD,CADc,CAA5B;AAUA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA;AAFuB,CAAD,KAGlB;AAAA;;AACJ,QAAMC,OAAO,GAAGP,SAAS,EAAzB;AACA,QAAMQ,MAAM,GAAGH,KAAK,CAACI,MAAN,CAAaC,EAA5B;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCxB,UAAU,CAACS,cAAD,EAAiBD,mBAAjB,CAAlD,CAHI,CAKJ;;AACA,QAAMiB,QAAQ,GAAG,MAAM;AACrBpB,IAAAA,aAAa,CAACe,MAAD,CAAb,CACGM,IADH,CACQC,IAAI,IAAI;AACZC,MAAAA,YAAY,CAAC;AACXC,QAAAA,IAAI,EAAEC,YADK;AAEXC,QAAAA,OAAO,EAAEJ,IAAI,CAACK;AAFH,OAAD,CAAZ;AAID,KANH;AAOD,GARD;;AAUAjC,EAAAA,SAAS,CAAC,MAAM0B,QAAQ,EAAf,EAAmB,CAACF,YAAY,CAACU,QAAd,CAAnB,CAAT;AAEA,sBACE;AAAA,4BACE;AAAA,gBAAKf,SAAS,CAACgB;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEf,OAAO,CAACa,QAAzB;AAAmC,MAAA,EAAE,EAAE,aAAvC;AAAA,gBACGT,YAAY,CAACS,QAAb,CAAsBG,MAAtB,KAAiC,CAAjC,gBACC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,GAKCZ,YAAY,CAACS,QAAb,CAAsBI,GAAtB,CAA0B,CAACC,OAAD,EAAUC,KAAV,kBACxB,QAAC,OAAD;AACE,QAAA,IAAI,EAAED,OAAO,CAACE,OADhB;AAGE,QAAA,MAAM,EAAEnB,MAHV;AAIE,QAAA,WAAW,EAAEF,SAAS,CAACI;AAJzB,SAEOgB,KAFP;AAAA;AAAA;AAAA;AAAA,cADF;AANJ;AAAA;AAAA;AAAA;AAAA,YAFF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF,eAsBE,QAAC,IAAD;AACE,MAAA,OAAO,EAAEpB,SAAS,CAACI,EADrB;AAEE,MAAA,OAAO,EAAEF,MAFX;AAGE,MAAA,SAAS,EAAE,MAAMI,eAAe,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD;AAHlC;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA,kBADF;AA8BD,CAnDM;;GAAMb,Q;UAIKJ,S;;;KAJLI,Q","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n// styles\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@mui/material/List\";\nimport ListItemText from \"@mui/material/ListItemText\";\n// api\nimport { fetchMessages } from \"../../apis/rooms\"\n// reducer\nimport { dataInitialState, dataReducer } from '../../reducer/DataReducer';\nimport { messageInitialState, messageReducer } from '../../reducer/MessageReducer';\n// Cpmponent\nimport { Chat } from \"../../components/Forms/Chat\";\nimport { Message } from \"../../components/Lists/Message\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    \"messages\": {\n      height: \"400px\",\n      padding: \"0\",\n      overflow: \"auto\"\n    }\n  }),\n);\n\nexport const TalkRoom = ({\n  match,\n  loginUser,\n}) => {\n  const classes = useStyles();\n  const roomId = match.params.id\n  const [messageState, messageDispatch] = useReducer(messageReducer, messageInitialState)\n\n  // トークルームのメッセージ一覧を取得する\n  const Messages = () => {\n    fetchMessages(roomId)\n      .then(data => {\n        roomDispatch({\n          type: fetchSuccess,\n          payload: data.messages,\n        })\n      })\n  }\n\n  useEffect(() => Messages(), [messageState.reRender])\n\n  return (\n    <>\n      <h3>{loginUser.name}</h3>\n      <List className={classes.messages} id={\"scroll-area\"}>\n        {messageState.messages.length === 0 ? (\n          <ListItemText>\n            メッセージはありません。\n          </ListItemText>\n        ) : (\n          messageState.messages.map((message, index) =>\n            <Message\n              text={message.content}\n              key={index}\n              roomId={roomId}\n              loginUserId={loginUser.id}\n            />\n          )\n        )\n        }\n      </List>\n      <p>\n        トークを入力する箇所\n      </p>\n      <Chat\n        user_id={loginUser.id}\n        room_id={roomId}\n        dataFetch={() => messageDispatch({ type: 'fetching' })}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}