{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/User.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'; // styled\n\nimport { Grid } from \"@mui/material\"; // api\n\nimport { fetchUser } from \"../../apis/users\"; // コンポーネント\n\nimport { MyProfile } from \"../../components/Users/MyProfile\";\nimport { Followers } from \"../../components/Users/Followers\";\nimport { AvatarButton } from \"../../components/Navigations/AvatarButton\";\nimport { Calendar } from \"../../components/Diaries/Calendar\";\nimport { Microposts } from \"./Microposts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const User = props => {\n  _s();\n\n  const userId = props.match.params.id;\n  const [user, setUser] = useState('No Name');\n  const [microposts, setMicroposts] = useState([]);\n  const [isFetching, setIsFetching] = useState(false); // ユーザー情報の取得\n\n  useEffect(() => {\n    fetchUser({\n      userId: userId\n    }).then(data => {\n      setUser(data.user);\n      setIsFetching(false);\n    });\n    return () => {\n      setUser([]);\n    };\n  }, [isFetching]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    sx: {\n      maxWidth: 1000,\n      mx: \"auto\",\n      bgcolor: 'grey.500'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      sx: {\n        px: 2,\n        bgcolor: 'grey.100'\n      },\n      children: /*#__PURE__*/_jsxDEV(MyProfile, {\n        dataFetching: () => setIsFetching(true),\n        loginUser: props.loginUser,\n        isLoggedIn: props.isLoggedIn,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      sx: {\n        px: 2,\n        bgcolor: 'grey.300'\n      },\n      children: /*#__PURE__*/_jsxDEV(Calendar, {\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sx: {\n        px: 2,\n        bgcolor: 'grey.400'\n      },\n      children: /*#__PURE__*/_jsxDEV(Microposts, {\n        userId: userId,\n        loginUser: props.loginUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(User, \"F6ywMRnhHMSwH3fFR3VihDTABrc=\");\n\n_c = User;\n{\n  /* <Grid item xs={12} sm={8} sx={{ px: 2, bgcolor: 'grey.200' }}>\n   <AvatarButton user={user} size=\"45\" />\n   <MyProfile\n     dataFetching={() => setIsFetching(true)}\n     loginUser={props.loginUser}\n     isLoggedIn={props.isLoggedIn}\n     user={user}\n     microposts={microposts}\n     following={following}\n     followers={followers}\n   />\n  </Grid> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/User.jsx"],"names":["React","useState","useEffect","BrowserRouter","Switch","Route","Grid","fetchUser","MyProfile","Followers","AvatarButton","Calendar","Microposts","User","props","userId","match","params","id","user","setUser","microposts","setMicroposts","isFetching","setIsFetching","then","data","maxWidth","mx","bgcolor","px","loginUser","isLoggedIn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n// styled\nimport { Grid } from \"@mui/material\";\n// api\nimport { fetchUser } from \"../../apis/users\";\n// コンポーネント\nimport { MyProfile } from \"../../components/Users/MyProfile\";\nimport { Followers } from \"../../components/Users/Followers\";\nimport { AvatarButton } from \"../../components/Navigations/AvatarButton\";\nimport { Calendar } from \"../../components/Diaries/Calendar\";\nimport { Microposts } from \"./Microposts\";\n\n\nexport const User = (props) => {\n  const userId = props.match.params.id\n  const [user, setUser] = useState('No Name')\n  const [microposts, setMicroposts] = useState([])\n  const [isFetching, setIsFetching] = useState(false)\n  // ユーザー情報の取得\n  useEffect(() => {\n    fetchUser({ userId: userId })\n      .then(data => {\n        setUser(data.user)\n        setIsFetching(false)\n      })\n    return () => {\n      setUser([])\n    }\n  }, [isFetching])\n\n  return (\n    <Grid container sx={{ maxWidth: 1000, mx: \"auto\", bgcolor: 'grey.500' }}>\n      <Grid item xs={12} sm={4} sx={{ px: 2, bgcolor: 'grey.100' }}>\n        <MyProfile\n          dataFetching={() => setIsFetching(true)}\n          loginUser={props.loginUser}\n          isLoggedIn={props.isLoggedIn}\n          user={user}\n        />\n      </Grid>\n      <Grid item xs={12} sm={8} sx={{ px: 2, bgcolor: 'grey.300' }}>\n        <Calendar\n          userId={userId}\n        />\n      </Grid>\n      <Grid item sx={{ px: 2, bgcolor: 'grey.400' }}>\n        <Microposts\n          userId={userId}\n          loginUser={props.loginUser}\n        />\n      </Grid>\n\n    </Grid>\n  )\n}\n\n{/* <Grid item xs={12} sm={8} sx={{ px: 2, bgcolor: 'grey.200' }}>\n  <AvatarButton user={user} size=\"45\" />\n  <MyProfile\n    dataFetching={() => setIsFetching(true)}\n    loginUser={props.loginUser}\n    isLoggedIn={props.isLoggedIn}\n    user={user}\n    microposts={microposts}\n    following={following}\n    followers={followers}\n  />\n</Grid> */}\n"]},"metadata":{},"sourceType":"module"}