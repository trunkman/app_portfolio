{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Timeline.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\"; // Style\n\nimport Box from '@mui/material/Box';\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@mui/material/Typography\"; // Api\n\nimport { fetchTimeline } from \"../../apis/users\"; // Reducer\n\nimport { timelineInitialState, timelineReducer } from '../../reducer/TimelineReducer'; // Cpmponent\n\nimport { Micropost } from \"../../components/Lists/Micropost\";\nimport { Loading } from '../../components/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => createStyles({\n  'root': {\n    alignItems: 'center',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    maxWidth: 800,\n    mx: 'auto',\n    textAlign: 'center',\n    width: '100%'\n  }\n}));\nexport const Timeline = ({\n  userId,\n  loginUser\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [timelineState, timelineDispatch] = useReducer(timelineReducer, timelineInitialState); // 投稿一覧を取得する\n\n  const Timeline = () => {\n    fetchTimeline(userId).then(data => {\n      timelineDispatch({\n        type: 'fetchSuccess',\n        payload: {\n          timeline: data.timeline\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    Timeline();\n  }, [timelineState.reRender]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            letterSpacing: 10,\n            pb: 5\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"\\u30BF\\u30A4\\u30E0\\u30E9\\u30A4\\u30F3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: timelineState.fetchState != 'ok' ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 48\n        }, this) : timelineState.timeline.map(timeline => /*#__PURE__*/_jsxDEV(Micropost, {\n          commentCount: timeline.commentCount,\n          likeStatus: timeline.likeStatus,\n          loginUser: loginUser,\n          micropost: timeline.micropost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Timeline, \"NzJJDkNbnvM5g6Fgd8FFlVnWTDE=\", false, function () {\n  return [useStyles];\n});\n\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Timeline.jsx"],"names":["React","useEffect","useReducer","Box","createStyles","makeStyles","Typography","fetchTimeline","timelineInitialState","timelineReducer","Micropost","Loading","useStyles","alignItems","flexDirection","flexWrap","justifyContent","maxWidth","mx","textAlign","width","Timeline","userId","loginUser","classes","timelineState","timelineDispatch","then","data","type","payload","timeline","reRender","root","letterSpacing","pb","fetchState","map","commentCount","likeStatus","micropost"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C,C,CACA;;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,0BAAzC;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;;AACA,SAASC,oBAAT,EAA+BC,eAA/B,QAAsD,+BAAtD,C,CACA;;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;;;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAC,MAC3BD,YAAY,CAAC;AACX,UAAQ;AACNS,IAAAA,UAAU,EAAE,QADN;AAENC,IAAAA,aAAa,EAAE,QAFT;AAGNC,IAAAA,QAAQ,EAAE,MAHJ;AAINC,IAAAA,cAAc,EAAE,QAJV;AAKNC,IAAAA,QAAQ,EAAE,GALJ;AAMNC,IAAAA,EAAE,EAAE,MANE;AAONC,IAAAA,SAAS,EAAE,QAPL;AAQNC,IAAAA,KAAK,EAAE;AARD;AADG,CAAD,CADc,CAA5B;AAeA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACvBC,EAAAA,MADuB;AAEvBC,EAAAA;AAFuB,CAAD,KAGlB;AAAA;;AACJ,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCxB,UAAU,CAACO,eAAD,EAAkBD,oBAAlB,CAApD,CAFI,CAIJ;;AACA,QAAMa,QAAQ,GAAG,MAAM;AACrBd,IAAAA,aAAa,CAACe,MAAD,CAAb,CACGK,IADH,CACQC,IAAI,IAAI;AACZF,MAAAA,gBAAgB,CAAC;AACfG,QAAAA,IAAI,EAAE,cADS;AAEfC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,QAAQ,EAAEH,IAAI,CAACG;AAAjB;AAFM,OAAD,CAAhB;AAID,KANH;AAOD,GARD;;AAUA9B,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACI,aAAa,CAACO,QAAf,CAFM,CAAT;AAIA,sBACE;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAER,OAAO,CAACS,IAAxB;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAAEC,YAAAA,aAAa,EAAE,EAAjB;AAAqBC,YAAAA,EAAE,EAAE;AAAzB,WAAT;AAAA,iCAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,GAAD;AAAA,kBAEIV,aAAa,CAACW,UAAd,IAA4B,IAA5B,gBAAmC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAAnC,GACEX,aAAa,CAACM,QAAd,CAAuBM,GAAvB,CAA2BN,QAAQ,iBACjC,QAAC,SAAD;AACE,UAAA,YAAY,EAAEA,QAAQ,CAACO,YADzB;AAEE,UAAA,UAAU,EAAEP,QAAQ,CAACQ,UAFvB;AAGE,UAAA,SAAS,EAAEhB,SAHb;AAIE,UAAA,SAAS,EAAEQ,QAAQ,CAACS;AAJtB;AAAA;AAAA;AAAA;AAAA,gBADF;AAHN;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAsBD,CA5CM;;GAAMnB,Q;UAIKT,S;;;KAJLS,Q","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\n// Style\nimport Box from '@mui/material/Box';\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@mui/material/Typography\";\n// Api\nimport { fetchTimeline } from \"../../apis/users\";\n// Reducer\nimport { timelineInitialState, timelineReducer } from '../../reducer/TimelineReducer';\n// Cpmponent\nimport { Micropost } from \"../../components/Lists/Micropost\";\nimport { Loading } from '../../components/Loading';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    'root': {\n      alignItems: 'center',\n      flexDirection: 'column',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      maxWidth: 800,\n      mx: 'auto',\n      textAlign: 'center',\n      width: '100%',\n    }\n  }),\n);\n\nexport const Timeline = ({\n  userId,\n  loginUser,\n}) => {\n  const classes = useStyles();\n  const [timelineState, timelineDispatch] = useReducer(timelineReducer, timelineInitialState);\n\n  // 投稿一覧を取得する\n  const Timeline = () => {\n    fetchTimeline(userId)\n      .then(data => {\n        timelineDispatch({\n          type: 'fetchSuccess',\n          payload: { timeline: data.timeline }\n        })\n      })\n  }\n\n  useEffect(() => {\n    Timeline()\n  }, [timelineState.reRender])\n\n  return (\n    <>\n      <Box className={classes.root}>\n        <Typography variant=\"h3\">\n          <Box sx={{ letterSpacing: 10, pb: 5 }}><b>タイムライン</b></Box>\n        </Typography>\n        <Box>\n          {\n            timelineState.fetchState != 'ok' ? <Loading /> :\n              timelineState.timeline.map(timeline =>\n                <Micropost\n                  commentCount={timeline.commentCount}\n                  likeStatus={timeline.likeStatus}\n                  loginUser={loginUser}\n                  micropost={timeline.micropost}\n                />\n              )\n          }\n        </Box>\n      </Box>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}