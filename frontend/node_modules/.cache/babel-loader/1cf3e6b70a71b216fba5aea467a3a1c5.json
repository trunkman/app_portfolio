{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/components/Diaries/Calendar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useCallback } from 'react'; // styles\n// import Grid from \"@mui/material/Grid\";\n\nimport Button from \"@mui/material/Button\";\nimport FullCalendar, { EventContentArg } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin, { DateClickArg } from '@fullcalendar/interaction'; // api\n\nimport { fetchUserDiaries } from \"../../apis/users\"; // コンポーネント\n\nimport { DiaryDialog } from \"../Dialogs/DiaryDialog\";\nimport { DiaryShowDialog } from \"../Dialogs/DiaryShowDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Calendar = props => {\n  _s();\n\n  const [diaries, setDiaries] = useState([{\n    title: \"good\",\n    start: \"2021-11-09\"\n  }]);\n  const [open, setOpen] = useState(false);\n  const [openShow, setShowOpen] = useState(false); // 日記Dialogを開閉する関数群\n\n  const handleOpen = () => setOpen(true);\n\n  const handleClose = () => setOpen(false);\n\n  useEffect(() => {\n    fetchUserDiaries(1).then(data => {\n      // data.diaries.map(feel => {\n      //   diaries.push({\n      //     title: feel.feeling,\n      //     start: feel.date,\n      //   })\n      // })\n      setDiary(data.diaries);\n      console.log(diaries);\n    });\n  }, []);\n  const handleDateClick = useCallback(arg => {\n    setShowOpen(true);\n    return /*#__PURE__*/_jsxDEV(DiaryShowDialog, {\n      open: openShow,\n      handleClose: () => setShowOpen(false),\n      date: arg.dateStr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }, []);\n\n  const renderEventContent = eventInfo => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: eventInfo.dateText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: eventInfo.event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      locale: \"ja\",\n      events: diaries,\n      dateClick: handleDateClick,\n      eventContent: renderEventContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"inherit\",\n      onClick: handleOpen,\n      children: \"\\u8A18\\u9332\\u3059\\u308B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryDialog, {\n      open: open,\n      handleClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: diaries.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: diaries[0].start\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Calendar, \"QxxWwZ3RPJ2YPN0bt9casvqzlPs=\");\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/components/Diaries/Calendar.jsx"],"names":["React","useEffect","useState","useCallback","Button","FullCalendar","EventContentArg","dayGridPlugin","interactionPlugin","DateClickArg","fetchUserDiaries","DiaryDialog","DiaryShowDialog","Calendar","props","diaries","setDiaries","title","start","open","setOpen","openShow","setShowOpen","handleOpen","handleClose","then","data","setDiary","console","log","handleDateClick","arg","dateStr","renderEventContent","eventInfo","dateText","event","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useCallback } from 'react';\n// styles\n// import Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport FullCalendar, { EventContentArg } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin, { DateClickArg } from '@fullcalendar/interaction';\n// api\nimport { fetchUserDiaries } from \"../../apis/users\";\n// コンポーネント\nimport { DiaryDialog } from \"../Dialogs/DiaryDialog\"\nimport { DiaryShowDialog } from \"../Dialogs/DiaryShowDialog\"\n\nexport const Calendar = (props) => {\n  const [diaries, setDiaries] = useState([{ title: \"good\", start: \"2021-11-09\" }])\n  const [open, setOpen] = useState(false)\n  const [openShow, setShowOpen] = useState(false)\n  // 日記Dialogを開閉する関数群\n  const handleOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  useEffect(() => {\n    fetchUserDiaries(1)\n      .then(data => {\n        // data.diaries.map(feel => {\n        //   diaries.push({\n        //     title: feel.feeling,\n        //     start: feel.date,\n        //   })\n        // })\n        setDiary(data.diaries)\n        console.log(diaries)\n      })\n  }, [])\n\n  const handleDateClick = useCallback((arg: DateClickArg) => {\n    setShowOpen(true)\n    return (\n      < DiaryShowDialog\n        open={openShow}\n        handleClose={() => setShowOpen(false)}\n        date={arg.dateStr}\n      />\n    )\n  }, [])\n\n  const renderEventContent = (eventInfo: EventContentArg) => (\n    <>\n      <b>{eventInfo.dateText}</b>\n      <i>{eventInfo.event.title}</i>\n    </>\n  )\n\n  return (\n    <>\n      <FullCalendar\n        plugins={[dayGridPlugin, interactionPlugin]}\n        initialView=\"dayGridMonth\"\n        locale=\"ja\"\n        events={diaries}\n        dateClick={handleDateClick}\n        eventContent={renderEventContent}\n      />\n\n      <Button variant=\"inherit\" onClick={handleOpen}>\n        記録する\n      </Button>\n      <DiaryDialog\n        open={open}\n        handleClose={handleClose}\n      />\n      <p>{diaries.length}</p>\n      <p>{diaries[0].start}</p>\n\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}