{"ast":null,"code":"import axios from 'axios';\nimport { signUp, userPath, users, userMicroposts } from '../urls/index'; // ユーザーページを表示するapi\n\nexport const fetchUser = params => {\n  return axios.get(userPath(params.userId), {\n    user: {\n      id: params.userId\n    }\n  }, {\n    withCredentials: true\n  }).then(res => {\n    console.log('user#show', res);\n    return res.data;\n  }).catch(e => console.error(e));\n}; // 新規登録するためのapi\n\nexport const postSignUp = params => {\n  return axios.post(signUp, {\n    user: {\n      name: params.name,\n      email: params.email,\n      password: params.password,\n      password_confirmation: params.password_confirmation\n    }\n  }, {\n    withCredentials: true\n  }).then(res => {\n    if (res.data.logged_in) {\n      console.log('signup/user#create', res);\n      return res.data;\n    }\n  }).catch(e => {\n    console.error(e);\n    return 'nil';\n  });\n}; // ユーザー情報更新のapi\n\nexport const patchUpdate = params => {\n  return axios.patch(userPath(params.user_id), {\n    user: {\n      name: params.name,\n      email: params.email,\n      password: params.password,\n      password_confirmation: params.password_confirmation\n    }\n  }, {\n    withCredentials: true\n  }).then(res => {\n    if (res.data) {\n      console.log('user#update', res);\n      return res.data;\n    }\n  }).catch(e => {\n    console.error(e);\n    return 'nil';\n  });\n}; // ユーザー一覧を表示するapi\n\nexport const fetchUsers = () => {\n  return axios.get(users, {\n    withCredentials: true\n  }).then(res => {\n    console.log('user#index', res);\n    return res.data;\n  }).catch(e => {\n    console.error(e);\n  });\n}; // ユーザーを削除する\n\nexport const deleteUser = userId => {\n  return axios.delete(userPath(userId), {\n    withCredentials: true\n  }).then(res => {\n    console.log('user#destroy', res);\n    return res.data;\n  }).catch(e => {\n    console.error(e);\n  });\n}; // 投稿一覧を取得するapi\n\nexport const fetchMicroposts = userId => {\n  return axios.get(userMicroposts(userId), {\n    withCredentials: true\n  }).then(res => {\n    console.log('users#microposts', res);\n    return res.data;\n  }).catch(error => {\n    console.log('users#microposts', error);\n  });\n}; // // Folloingをfetchする ※cookieが送れない問題あり\n// export const fetchFollowing = (params) => {\n//   return axios.get(following(params.userId), {\n//     user: { id: params.userId }\n//   }, { withCredentials: true }\n//   )\n//     .then(res => {\n//       console.log('user#following', res)\n//       return res.data\n//     })\n//     .catch(e => console.log(e))\n// }\n// // Followersをfetchする\n// export const fetchFollowers = (params) => {\n//   return axios.get(followers(params.userId), {\n//     user: { id: params.userId }\n//   }, { withCredentials: true })\n//     .then(res => {\n//       console.log('user#followers', res)\n//       return res.data\n//     })\n//     .catch(e => { console.error(e) })\n// }","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/apis/users.js"],"names":["axios","signUp","userPath","users","userMicroposts","fetchUser","params","get","userId","user","id","withCredentials","then","res","console","log","data","catch","e","error","postSignUp","post","name","email","password","password_confirmation","logged_in","patchUpdate","patch","user_id","fetchUsers","deleteUser","delete","fetchMicroposts"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { signUp, userPath, users, userMicroposts } from '../urls/index'\n\n// ユーザーページを表示するapi\nexport const fetchUser = (params) => {\n  return axios.get(userPath(params.userId), {\n    user: { id: params.userId }\n  }, { withCredentials: true })\n    .then(res => {\n      console.log('user#show', res)\n      return res.data\n    }).catch((e) => console.error(e))\n}\n\n// 新規登録するためのapi\nexport const postSignUp = (params) => {\n  return axios.post(signUp, {\n    user: {\n      name: params.name,\n      email: params.email,\n      password: params.password,\n      password_confirmation: params.password_confirmation,\n    }\n  },\n    { withCredentials: true }\n  )\n    .then(res => {\n      if (res.data.logged_in) {\n        console.log('signup/user#create', res);\n        return res.data;\n      }\n    })\n    .catch(e => {\n      console.error(e);\n      return 'nil'\n    })\n}\n\n// ユーザー情報更新のapi\nexport const patchUpdate = (params) => {\n  return axios.patch(userPath(params.user_id), {\n    user: {\n      name: params.name,\n      email: params.email,\n      password: params.password,\n      password_confirmation: params.password_confirmation,\n    }\n  },\n    { withCredentials: true }\n  )\n    .then(res => {\n      if (res.data) {\n        console.log('user#update', res);\n        return res.data;\n      }\n    })\n    .catch(e => {\n      console.error(e);\n      return 'nil'\n    })\n}\n\n// ユーザー一覧を表示するapi\nexport const fetchUsers = () => {\n  return axios.get(users, { withCredentials: true })\n    .then(res => {\n      console.log('user#index', res)\n      return res.data\n    })\n    .catch(e => { console.error(e) })\n}\n\n// ユーザーを削除する\nexport const deleteUser = (userId) => {\n  return axios.delete(userPath(userId), { withCredentials: true })\n    .then(res => {\n      console.log('user#destroy', res)\n      return res.data\n    })\n    .catch(e => { console.error(e) })\n}\n\n// 投稿一覧を取得するapi\nexport const fetchMicroposts = (userId) => {\n  return axios.get(userMicroposts(userId), { withCredentials: true })\n    .then(res => {\n      console.log('users#microposts', res)\n      return res.data\n    })\n    .catch(error => {\n      console.log('users#microposts', error)\n    })\n}\n\n// // Folloingをfetchする ※cookieが送れない問題あり\n// export const fetchFollowing = (params) => {\n//   return axios.get(following(params.userId), {\n//     user: { id: params.userId }\n//   }, { withCredentials: true }\n//   )\n//     .then(res => {\n//       console.log('user#following', res)\n//       return res.data\n//     })\n//     .catch(e => console.log(e))\n// }\n\n// // Followersをfetchする\n// export const fetchFollowers = (params) => {\n//   return axios.get(followers(params.userId), {\n//     user: { id: params.userId }\n//   }, { withCredentials: true })\n//     .then(res => {\n//       console.log('user#followers', res)\n//       return res.data\n//     })\n//     .catch(e => { console.error(e) })\n// }\n"]},"metadata":{},"sourceType":"module"}