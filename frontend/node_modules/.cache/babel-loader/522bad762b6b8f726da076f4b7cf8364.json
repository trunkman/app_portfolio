{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/context/AuthContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { fetchLoggedIn } from \"../apis/sessions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Auth = /*#__PURE__*/createContext();\nexport const AuthContext = () => {\n  _s();\n\n  return useContext(AuthContext);\n};\n\n_s(AuthContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c = AuthContext;\n\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loginUser, setLoginUser] = useState({}); // ログイン&ログアウト実行のコールバック関数\n\n  const handleLogIn = loginUser => {\n    setIsLoggedIn(true);\n    setLoginUser(loginUser);\n  };\n\n  const handleLogOut = () => {\n    setIsLoggedIn(false);\n    setLoginUser({});\n  }; // ログイン状態を保持する\n\n\n  useEffect(() => {\n    fetchLoggedIn().then(data => {\n      if (data.logged_in && isLoggedIn === false) {\n        handleLogIn(data.user);\n      } else if (!data.logged_in && isLoggedIn === true) {\n        handleLogOut();\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      loginUser,\n      handleLogIn,\n      handleLogOut\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AuthProvider, \"IBifKGsNjYa2lRjCihiRv+xh3II=\");\n\n_c2 = AuthProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthContext\");\n$RefreshReg$(_c2, \"AuthProvider\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/context/AuthContext.jsx"],"names":["React","createContext","useState","useContext","useEffect","fetchLoggedIn","Auth","AuthContext","AuthProvider","children","isLoggedIn","setIsLoggedIn","loginUser","setLoginUser","handleLogIn","handleLogOut","then","data","logged_in","user"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,EAAqDC,SAArD,QAAsE,OAAtE;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAEA,OAAO,MAAMC,IAAI,gBAAGL,aAAa,EAA1B;AAEP,OAAO,MAAMM,WAAW,GAAG,MAAM;AAAA;;AAC/B,SAAOJ,UAAU,CAACI,WAAD,CAAjB;AACD,CAFM;;GAAMA,W;;KAAAA,W;;AAKb,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C,CAFqC,CAIrC;;AACA,QAAMY,WAAW,GAAIF,SAAD,IAAe;AACjCD,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACD,GAHD;;AAIA,QAAMG,YAAY,GAAG,MAAM;AACzBJ,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAHD,CATqC,CAarC;;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,aAAa,GACVW,IADH,CACQC,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACC,SAAL,IAAkBR,UAAU,KAAK,KAArC,EAA4C;AAC1CI,QAAAA,WAAW,CAACG,IAAI,CAACE,IAAN,CAAX;AACD,OAFD,MAEO,IAAI,CAACF,IAAI,CAACC,SAAN,IAAmBR,UAAU,KAAK,IAAtC,EAA4C;AACjDK,QAAAA,YAAY;AACb;AACF,KAPH;AAQD,GATQ,EASN,EATM,CAAT;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLL,MAAAA,UADK;AAELE,MAAAA,SAFK;AAGLE,MAAAA,WAHK;AAILC,MAAAA;AAJK,KADT;AAAA,cAQGN;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CArCD;;IAAMD,Y;;MAAAA,Y","sourcesContent":["import React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { fetchLoggedIn } from \"../apis/sessions\";\n\nexport const Auth = createContext()\n\nexport const AuthContext = () => {\n  return useContext(AuthContext)\n}\n\n\nconst AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loginUser, setLoginUser] = useState({});\n\n  // ログイン&ログアウト実行のコールバック関数\n  const handleLogIn = (loginUser) => {\n    setIsLoggedIn(true);\n    setLoginUser(loginUser);\n  }\n  const handleLogOut = () => {\n    setIsLoggedIn(false);\n    setLoginUser({});\n  }\n  // ログイン状態を保持する\n  useEffect(() => {\n    fetchLoggedIn()\n      .then(data => {\n        if (data.logged_in && isLoggedIn === false) {\n          handleLogIn(data.user)\n        } else if (!data.logged_in && isLoggedIn === true) {\n          handleLogOut()\n        }\n      })\n  }, [])\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn,\n        loginUser,\n        handleLogIn,\n        handleLogOut,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}