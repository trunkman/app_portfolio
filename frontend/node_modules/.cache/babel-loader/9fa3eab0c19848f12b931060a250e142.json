{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css'; // api\n\nimport { fetchLoggedIn } from './apis/sessions'; // コンテイナー\n\nimport { Home } from './containers/Home';\nimport { User } from './containers/User';\nimport { Users } from './containers/Users';\nimport { Header } from \"./components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loginUser, setLoginUser] = useState({});\n  const [openLogInDialog, setOpenLogInDialog] = useState(false); // ログイン実行のコールバック関数\n\n  const handleLogIn = loginUser => {\n    setIsLoggedIn(true);\n    setLoginUser(loginUser);\n  }; // ログアウト実行のコールバック関数\n\n\n  const handleLogOut = () => {\n    setIsLoggedIn(false);\n    setLoginUser({});\n  }; // ログインDialogを開閉する関数群\n\n\n  const handleOpenLogIn = () => setOpenLogInDialog(true);\n\n  const handleCloseLogIn = () => setOpenLogInDialog(false); // ログイン状態を保持する\n\n\n  useEffect(() => {\n    fetchLoggedIn().then(data => {\n      if (data.logged_in && isLoggedIn === false) {\n        handleLogIn(data.user);\n      } else if (!data.logged_in && isLoggedIn === true) {\n        handleLogOut();\n      }\n    });\n  }, [isLoggedIn]);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      handleCloseLogIn: handleCloseLogIn,\n      handleLogOut: handleLogOut,\n      handleLogIn: handleLogIn,\n      handleOpenLogIn: handleOpenLogIn,\n      isLoggedIn: isLoggedIn,\n      open: openLogInDialog,\n      user: loginUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Home, {\n          handleCloseLogIn: handleCloseLogIn,\n          handleLogOut: handleLogOut,\n          handleLogIn: handleLogIn,\n          handleOpenLogIn: handleOpenLogIn,\n          isLoggedIn: isLoggedIn,\n          open: openLogInDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/users/:id\",\n        render: ({\n          match: {\n            userId\n          }\n        }) => /*#__PURE__*/_jsxDEV(User, {\n          handleLogOut: handleLogOut,\n          handleLogIn: handleLogIn,\n          isLoggedIn: isLoggedIn,\n          match: match,\n          loginUser: loginUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/users\",\n        children: /*#__PURE__*/_jsxDEV(Users, {\n          handleLogOut: handleLogOut,\n          handleLogIn: handleLogIn,\n          isLoggedIn: isLoggedIn,\n          user: loginUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tO1WWawzS79AH2dsnvudgx80Tx4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/App.jsx"],"names":["React","useState","useEffect","BrowserRouter","Switch","Route","fetchLoggedIn","Home","User","Users","Header","App","isLoggedIn","setIsLoggedIn","loginUser","setLoginUser","openLogInDialog","setOpenLogInDialog","handleLogIn","handleLogOut","handleOpenLogIn","handleCloseLogIn","then","data","logged_in","user","match","userId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;AACA,OAAO,WAAP,C,CACA;;AACA,SAASC,aAAT,QAA8B,iBAA9B,C,CACA;;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,MAAT,QAAuB,qBAAvB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CAAC,KAAD,CAAtD,CAH4B,CAI5B;;AACA,QAAMiB,WAAW,GAAIJ,SAAD,IAAe;AACjCD,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACD,GAHD,CAL4B,CAS5B;;;AACA,QAAMK,YAAY,GAAG,MAAM;AACzBN,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAHD,CAV4B,CAc5B;;;AACA,QAAMK,eAAe,GAAG,MAAMH,kBAAkB,CAAC,IAAD,CAAhD;;AACA,QAAMI,gBAAgB,GAAG,MAAMJ,kBAAkB,CAAC,KAAD,CAAjD,CAhB4B,CAiB5B;;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,aAAa,GACVgB,IADH,CACQC,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACC,SAAL,IAAkBZ,UAAU,KAAK,KAArC,EAA4C;AAC1CM,QAAAA,WAAW,CAACK,IAAI,CAACE,IAAN,CAAX;AACD,OAFD,MAEO,IAAI,CAACF,IAAI,CAACC,SAAN,IAAmBZ,UAAU,KAAK,IAAtC,EAA4C;AACjDO,QAAAA,YAAY;AACb;AACF,KAPH;AAQD,GATQ,EASN,CAACP,UAAD,CATM,CAAT;AAWA,sBACE,QAAC,aAAD;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,gBAAgB,EAAES,gBADpB;AAEE,MAAA,YAAY,EAAEF,YAFhB;AAGE,MAAA,WAAW,EAAED,WAHf;AAIE,MAAA,eAAe,EAAEE,eAJnB;AAKE,MAAA,UAAU,EAAER,UALd;AAME,MAAA,IAAI,EAAEI,eANR;AAOE,MAAA,IAAI,EAAEF;AAPR;AAAA;AAAA;AAAA;AAAA,YADF,eAUE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,gBAAgB,EAAEO,gBADpB;AAEE,UAAA,YAAY,EAAEF,YAFhB;AAGE,UAAA,WAAW,EAAED,WAHf;AAIE,UAAA,eAAe,EAAEE,eAJnB;AAKE,UAAA,UAAU,EAAER,UALd;AAME,UAAA,IAAI,EAAEI;AANR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AACE,QAAA,MAAM,EAAE,CAAC;AAAEU,UAAAA,KAAK,EAAE;AAAEC,YAAAA;AAAF;AAAT,SAAD,kBACN,QAAC,IAAD;AACE,UAAA,YAAY,EAAER,YADhB;AAEE,UAAA,WAAW,EAAED,WAFf;AAGE,UAAA,UAAU,EAAEN,UAHd;AAIE,UAAA,KAAK,EAAEc,KAJT;AAKE,UAAA,SAAS,EAAEZ;AALb;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cAXF,eAsBE,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,QAAlB;AAAA,+BACE,QAAC,KAAD;AACE,UAAA,YAAY,EAAEK,YADhB;AAEE,UAAA,WAAW,EAAED,WAFf;AAGE,UAAA,UAAU,EAAEN,UAHd;AAIE,UAAA,IAAI,EAAEE;AAJR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4CD;;GAzEuBH,G;;KAAAA,G","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport './App.css';\n// api\nimport { fetchLoggedIn } from './apis/sessions';\n// コンテイナー\nimport { Home } from './containers/Home'\nimport { User } from './containers/User'\nimport { Users } from './containers/Users'\nimport { Header } from \"./components/Header\"\n\nexport default function App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loginUser, setLoginUser] = useState({});\n  const [openLogInDialog, setOpenLogInDialog] = useState(false)\n  // ログイン実行のコールバック関数\n  const handleLogIn = (loginUser) => {\n    setIsLoggedIn(true);\n    setLoginUser(loginUser);\n  }\n  // ログアウト実行のコールバック関数\n  const handleLogOut = () => {\n    setIsLoggedIn(false);\n    setLoginUser({});\n  }\n  // ログインDialogを開閉する関数群\n  const handleOpenLogIn = () => setOpenLogInDialog(true)\n  const handleCloseLogIn = () => setOpenLogInDialog(false)\n  // ログイン状態を保持する\n  useEffect(() => {\n    fetchLoggedIn()\n      .then(data => {\n        if (data.logged_in && isLoggedIn === false) {\n          handleLogIn(data.user)\n        } else if (!data.logged_in && isLoggedIn === true) {\n          handleLogOut()\n        }\n      })\n  }, [isLoggedIn])\n\n  return (\n    <BrowserRouter>\n      <Header\n        handleCloseLogIn={handleCloseLogIn}\n        handleLogOut={handleLogOut}\n        handleLogIn={handleLogIn}\n        handleOpenLogIn={handleOpenLogIn}\n        isLoggedIn={isLoggedIn}\n        open={openLogInDialog}\n        user={loginUser}\n      />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home\n            handleCloseLogIn={handleCloseLogIn}\n            handleLogOut={handleLogOut}\n            handleLogIn={handleLogIn}\n            handleOpenLogIn={handleOpenLogIn}\n            isLoggedIn={isLoggedIn}\n            open={openLogInDialog}\n          />\n        </Route>\n        <Route path=\"/users/:id\"\n          render={({ match: { userId } }) =>\n            <User\n              handleLogOut={handleLogOut}\n              handleLogIn={handleLogIn}\n              isLoggedIn={isLoggedIn}\n              match={match}\n              loginUser={loginUser}\n            />\n          }\n        />\n        <Route exact path=\"/users\">\n          <Users\n            handleLogOut={handleLogOut}\n            handleLogIn={handleLogIn}\n            isLoggedIn={isLoggedIn}\n            user={loginUser}\n          />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}