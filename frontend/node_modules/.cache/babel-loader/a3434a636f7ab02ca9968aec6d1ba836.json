{"ast":null,"code":"import axios from 'axios';\nimport { signUp, logIn, logOut, loggedIn, userShow } from '../urls/index'; // ユーザーページを表示するapi\n\nexport const fetchUser = userId => {\n  return axios.get(userShow(userId)).then(res => {\n    console.log(res);\n    return res.data;\n  }).catch(e => console.error(e));\n}; // 新規登録するためのapi\n\nexport const postSignUp = params => {\n  return axios.post(signUp, {\n    user: {\n      name: params.name,\n      email: params.email,\n      password: params.password,\n      password_confirmation: params.password_confirmation\n    },\n    withCredentials: true // クレデンシャル(クッキー等)の許可\n\n  }).then(res => {\n    console.log(res);\n    return res.data;\n  }).catch(e => {\n    console.error(e);\n    return 'nil';\n  });\n}; // ログインするためのapi\n\nexport const postLogIn = params => {\n  return axios.post(logIn, {\n    session: {\n      email: params.email,\n      password: params.password\n    },\n    withCredentials: true\n  }).then(res => {\n    if (res.data.logged_in) {\n      console.log(res);\n      return res.data;\n    }\n  }).catch(e => {\n    console.error(e);\n    return 'nil';\n  });\n}; // ログアウトするapi\n\nexport const deleteLogout = () => {\n  return axios.delete(logOut, {\n    withCredentials: true\n  });\n}; // ログイン状態を追跡するapi\n\nexport const fetchLoggedIn = () => {\n  return axios.get(loggedIn, {\n    withCredentials: true\n  }).then(res => {\n    console.log('ログイン状況', res);\n    return res.data;\n  }).catch(error => {\n    console.log('ログインエラー', error);\n    return error;\n  });\n};","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/apis/users.js"],"names":["axios","signUp","logIn","logOut","loggedIn","userShow","fetchUser","userId","get","then","res","console","log","data","catch","e","error","postSignUp","params","post","user","name","email","password","password_confirmation","withCredentials","postLogIn","session","logged_in","deleteLogout","delete","fetchLoggedIn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,QAAhC,EAA0CC,QAA1C,QAA0D,eAA1D,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAIC,MAAD,IAAY;AACnC,SAAOP,KAAK,CAACQ,GAAN,CAAUH,QAAQ,CAACE,MAAD,CAAlB,EACJE,IADI,CACCC,GAAG,IAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAOA,GAAG,CAACG,IAAX;AACD,GAJI,EAKJC,KALI,CAKGC,CAAD,IAAOJ,OAAO,CAACK,KAAR,CAAcD,CAAd,CALT,CAAP;AAMD,CAPM,C,CASP;;AACA,OAAO,MAAME,UAAU,GAAIC,MAAD,IAAY;AACpC,SAAOlB,KAAK,CAACmB,IAAN,CAAWlB,MAAX,EAAmB;AACxBmB,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEH,MAAM,CAACG,IADT;AAEJC,MAAAA,KAAK,EAAEJ,MAAM,CAACI,KAFV;AAGJC,MAAAA,QAAQ,EAAEL,MAAM,CAACK,QAHb;AAIJC,MAAAA,qBAAqB,EAAEN,MAAM,CAACM;AAJ1B,KADkB;AAOxBC,IAAAA,eAAe,EAAE,IAPO,CAOF;;AAPE,GAAnB,EASJhB,IATI,CASCC,GAAG,IAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAOA,GAAG,CAACG,IAAX;AACD,GAZI,EAaJC,KAbI,CAaEC,CAAC,IAAI;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,CAAd;AACA,WAAO,KAAP;AACD,GAhBI,CAAP;AAiBD,CAlBM,C,CAoBP;;AACA,OAAO,MAAMW,SAAS,GAAIR,MAAD,IAAY;AACnC,SAAOlB,KAAK,CAACmB,IAAN,CAAWjB,KAAX,EAAkB;AACvByB,IAAAA,OAAO,EAAE;AACPL,MAAAA,KAAK,EAAEJ,MAAM,CAACI,KADP;AAEPC,MAAAA,QAAQ,EAAEL,MAAM,CAACK;AAFV,KADc;AAKvBE,IAAAA,eAAe,EAAE;AALM,GAAlB,EAOJhB,IAPI,CAOCC,GAAG,IAAI;AACX,QAAIA,GAAG,CAACG,IAAJ,CAASe,SAAb,EAAwB;AACtBjB,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOA,GAAG,CAACG,IAAX;AACD;AACF,GAZI,EAaJC,KAbI,CAaEC,CAAC,IAAI;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,CAAd;AACA,WAAO,KAAP;AACD,GAhBI,CAAP;AAiBD,CAlBM,C,CAoBP;;AACA,OAAO,MAAMc,YAAY,GAAG,MAAM;AAChC,SAAO7B,KAAK,CAAC8B,MAAN,CAAa3B,MAAb,EAAqB;AAAEsB,IAAAA,eAAe,EAAE;AAAnB,GAArB,CAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMM,aAAa,GAAG,MAAM;AACjC,SAAO/B,KAAK,CAACQ,GAAN,CAAUJ,QAAV,EAAoB;AAAEqB,IAAAA,eAAe,EAAE;AAAnB,GAApB,EACJhB,IADI,CACCC,GAAG,IAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,GAAtB;AACA,WAAOA,GAAG,CAACG,IAAX;AACD,GAJI,EAIFC,KAJE,CAIIE,KAAK,IAAI;AAChBL,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,KAAvB;AACA,WAAOA,KAAP;AACD,GAPI,CAAP;AAQD,CATM","sourcesContent":["import axios from 'axios'\nimport { signUp, logIn, logOut, loggedIn, userShow } from '../urls/index'\n\n// ユーザーページを表示するapi\nexport const fetchUser = (userId) => {\n  return axios.get(userShow(userId))\n    .then(res => {\n      console.log(res)\n      return res.data\n    })\n    .catch((e) => console.error(e))\n}\n\n// 新規登録するためのapi\nexport const postSignUp = (params) => {\n  return axios.post(signUp, {\n    user: {\n      name: params.name,\n      email: params.email,\n      password: params.password,\n      password_confirmation: params.password_confirmation,\n    },\n    withCredentials: true // クレデンシャル(クッキー等)の許可\n  })\n    .then(res => {\n      console.log(res);\n      return res.data;\n    })\n    .catch(e => {\n      console.error(e);\n      return 'nil'\n    })\n}\n\n// ログインするためのapi\nexport const postLogIn = (params) => {\n  return axios.post(logIn, {\n    session: {\n      email: params.email,\n      password: params.password,\n    },\n    withCredentials: true\n  })\n    .then(res => {\n      if (res.data.logged_in) {\n        console.log(res)\n        return res.data\n      }\n    })\n    .catch(e => {\n      console.error(e);\n      return 'nil'\n    })\n}\n\n// ログアウトするapi\nexport const deleteLogout = () => {\n  return axios.delete(logOut, { withCredentials: true })\n}\n\n// ログイン状態を追跡するapi\nexport const fetchLoggedIn = () => {\n  return axios.get(loggedIn, { withCredentials: true })\n    .then(res => {\n      console.log('ログイン状況', res)\n      return res.data\n    }).catch(error => {\n      console.log('ログインエラー', error)\n      return error\n    })\n}\n"]},"metadata":{},"sourceType":"module"}