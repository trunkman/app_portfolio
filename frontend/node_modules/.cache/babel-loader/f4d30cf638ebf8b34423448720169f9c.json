{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/components/UserInfomation/Calendar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useReducer } from \"react\";\nimport { useCallback } from 'react'; // Style\n\nimport { Emoji } from 'emoji-mart';\nimport FullCalendar, { EventContentArg } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin, { DateClickArg } from '@fullcalendar/interaction';\nimport Box from '@mui/material/Box'; // Api\n\nimport { fetchUserDiaries } from \"../../apis/users\"; // Reducer\n\nimport { dialogReducer, dialogInitialState } from '../../reducer/DialogReducer';\nimport { recordReducer, recordInitialState } from '../../reducer/RecordReducer'; // Component\n\nimport { DiaryDialog } from \"../Dialogs/DiaryDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Calendar = ({\n  userId,\n  open\n}) => {\n  _s();\n\n  const [diaries, setDiaries] = useState([]);\n  const [dialogState, dialogDispatch] = useReducer(dialogReducer, dialogInitialState);\n  const [recordState, recordDispatch] = useReducer(recordReducer, recordInitialState); // カレンダーイベントの表記内容\n\n  const renderEventContent = event => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      textAlign: \"center\",\n      pt: 1\n    },\n    children: // イベントが感情 or 睡眠時間かの判定\n    event_data.event.title % 1 === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [event_data.event.title, \" h\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Emoji, {\n      emoji: event_data.event.title,\n      size: 24\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this); // イベントダイアログを表示\n\n\n  const handleClick = eventInfo => {\n    recordDispatch({\n      type: 'preUpdate',\n      payload: {\n        date: eventInfo.event.start,\n        sleepingHours: eventInfo.event.title,\n        feeling: eventInfo.event.title\n      }\n    });\n    dialogDispatch({\n      type: 'diary'\n    });\n  };\n\n  useEffect(() => {\n    fetchUserDiaries(userId).then(data => {\n      setDiaries(data.diaries);\n    });\n  }, [open]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      locale: \"ja\",\n      events: diaries,\n      eventClick: handleClick,\n      eventContent: renderEventContent,\n      businessHours: true,\n      dayCellContent: e => {\n        e.dayNumberText = e.dayNumberText.replace('日', '');\n      } // dayMaxEvents={true}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryDialog, {\n      handleClose: () => dialogDispatch({\n        type: 'close'\n      }),\n      open: dialogState.diary,\n      event: recordState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"tqKRHQaM47GY0L+Z+9G6OfGglSo=\");\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/components/UserInfomation/Calendar.jsx"],"names":["React","useEffect","useState","useReducer","useCallback","Emoji","FullCalendar","EventContentArg","dayGridPlugin","interactionPlugin","DateClickArg","Box","fetchUserDiaries","dialogReducer","dialogInitialState","recordReducer","recordInitialState","DiaryDialog","Calendar","userId","open","diaries","setDiaries","dialogState","dialogDispatch","recordState","recordDispatch","renderEventContent","event","textAlign","pt","event_data","title","handleClick","eventInfo","type","payload","date","start","sleepingHours","feeling","then","data","e","dayNumberText","replace","diary"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useReducer } from \"react\";\nimport { useCallback } from 'react';\n// Style\nimport { Emoji } from 'emoji-mart';\nimport FullCalendar, { EventContentArg } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin, { DateClickArg } from '@fullcalendar/interaction';\nimport Box from '@mui/material/Box';\n// Api\nimport { fetchUserDiaries } from \"../../apis/users\";\n// Reducer\nimport { dialogReducer, dialogInitialState } from '../../reducer/DialogReducer'\nimport { recordReducer, recordInitialState } from '../../reducer/RecordReducer'\n// Component\nimport { DiaryDialog } from \"../Dialogs/DiaryDialog\"\n\nexport const Calendar = ({\n  userId,\n  open,\n}) => {\n  const [diaries, setDiaries] = useState([]);\n  const [dialogState, dialogDispatch] = useReducer(dialogReducer, dialogInitialState);\n  const [recordState, recordDispatch] = useReducer(recordReducer, recordInitialState);\n\n  // カレンダーイベントの表記内容\n  const renderEventContent = (event) => (\n    <Box sx={{\n      textAlign: \"center\",\n      pt: 1,\n    }}>\n      { // イベントが感情 or 睡眠時間かの判定\n        event_data.event.title % 1 === 0 ?\n          <p><b>{event_data.event.title} h</b></p>\n          :\n          <Emoji\n            emoji={event_data.event.title}\n            size={24}\n          />\n      }\n    </Box>\n  )\n  // イベントダイアログを表示\n  const handleClick = (eventInfo: EventContentArg) => {\n    recordDispatch({\n      type: 'preUpdate',\n      payload: {\n        date: eventInfo.event.start,\n        sleepingHours: eventInfo.event.title,\n        feeling: eventInfo.event.title,\n      },\n    });\n    dialogDispatch({ type: 'diary' });\n  }\n\n  useEffect(() => {\n    fetchUserDiaries(userId)\n      .then(data => {\n        setDiaries(data.diaries)\n      })\n  }, [open])\n\n\n  return (\n    <Box>\n      <FullCalendar\n        plugins={[dayGridPlugin, interactionPlugin]}\n        initialView=\"dayGridMonth\"\n        locale=\"ja\"\n        events={diaries}\n        eventClick={handleClick}\n        eventContent={renderEventContent}\n        businessHours={true}\n        dayCellContent={(e) => { e.dayNumberText = e.dayNumberText.replace('日', '') }}\n      // dayMaxEvents={true}\n      />\n\n      < DiaryDialog\n        handleClose={() => dialogDispatch({ type: 'close' })}\n        open={dialogState.diary}\n        event={recordState}\n      />\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}