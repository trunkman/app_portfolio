{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Friends.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\"; // Style\n\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\nimport ListItemText from \"@mui/material/ListItemText\"; // Icon\n\nimport AccountCircle from \"@mui/icons-material/AccountCircle\"; // Api\n\nimport { fetchRooms } from \"../../apis/users\";\nimport { deleteRoom } from \"../../apis/rooms\"; // Reducer\n\nimport { roomInitialState, roomReducer } from '../../reducer/RoomReducer'; // Component\n\nimport { Loading } from '../../components/Loading';\nimport { DeleteDialog } from \"../../components/Dialogs/DeleteDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Friends = ({\n  userId\n}) => {\n  _s();\n\n  const history = useHistory();\n  const [roomState, roomDispatch] = useReducer(roomReducer, roomInitialState); // 削除確認ダイアログの開閉\n\n  const [open, setOpen] = useState({\n    isOpen: false,\n    roomId: ''\n  }); // トークルームの一覧を取得する\n\n  const Rooms = () => {\n    fetchRooms(userId).then(data => {\n      roomDispatch({\n        type: 'fetchSuccess',\n        payload: data.entries\n      });\n    });\n  }; // トークルームを削除する\n\n\n  const handleDelete = roomId => {\n    deleteRoom(roomId).then(() => {\n      history.push(`/talk_rooms/${userId}`);\n    });\n  };\n\n  useEffect(() => {\n    Rooms();\n  }, [open.isOpen]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        maxWidth: 800\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u30C8\\u30FC\\u30AF\\u30EB\\u30FC\\u30E0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), roomState.fetchState != 'ok' ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(List, {\n        sx: {\n          bgcolor: 'background.paper'\n        },\n        children: [roomState.entries.length == 0 && /*#__PURE__*/_jsxDEV(ListItemText, {\n          children: \"\\u30C8\\u30FC\\u30AF\\u3057\\u3066\\u3044\\u308B\\u4EBA\\u306F\\u3044\\u307E\\u305B\\u3093\\u3002\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this), roomState.entries.length != 0 && roomState.entries.map(entry => /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            divider: true,\n            onClick: () => history.push(`/talk_rooms/${entry.room_id}`),\n            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n              children: /*#__PURE__*/_jsxDEV(AccountCircle, {\n                sx: {\n                  fontSize: 60\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: entry.room_id,\n              secondary: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u30EB\\u30FC\\u30E0\\u306E\\u6700\\u5F8C\\u306E\\u6295\\u7A3F\\u3092\\u8A18\\u8F09\\u3059\\u308B\\u4E88\\u5B9A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setOpen({\n              isOpen: true,\n              roomId: entry.room_id\n            }),\n            children: \"\\u524A\\u9664\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 19\n          }, this)]\n        }, entry.id.toString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteDialog, {\n      handleClose: () => setOpen({\n        isOpen: false\n      }),\n      handleDelete: handleDelete(open.roomId),\n      message: 'トークルームを削除',\n      open: open.isOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Friends, \"FbYoCBixQb1YsSEVDCxv16CjNAc=\", false, function () {\n  return [useHistory];\n});\n\n_c = Friends;\n\nvar _c;\n\n$RefreshReg$(_c, \"Friends\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Friends.jsx"],"names":["React","useEffect","useReducer","useState","useHistory","Box","List","ListItem","ListItemAvatar","ListItemText","AccountCircle","fetchRooms","deleteRoom","roomInitialState","roomReducer","Loading","DeleteDialog","Friends","userId","history","roomState","roomDispatch","open","setOpen","isOpen","roomId","Rooms","then","data","type","payload","entries","handleDelete","push","maxWidth","fetchState","bgcolor","length","map","entry","room_id","fontSize","id","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n// Style\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\nimport ListItemText from \"@mui/material/ListItemText\";\n// Icon\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\n// Api\nimport { fetchRooms } from \"../../apis/users\";\nimport { deleteRoom } from \"../../apis/rooms\";\n// Reducer\nimport { roomInitialState, roomReducer } from '../../reducer/RoomReducer';\n// Component\nimport { Loading } from '../../components/Loading';\nimport { DeleteDialog } from \"../../components/Dialogs/DeleteDialog\";\n\nexport const Friends = ({ userId }) => {\n  const history = useHistory();\n  const [roomState, roomDispatch] = useReducer(roomReducer, roomInitialState);\n  // 削除確認ダイアログの開閉\n  const [open, setOpen] = useState({\n    isOpen: false,\n    roomId: '',\n  });\n  // トークルームの一覧を取得する\n  const Rooms = () => {\n    fetchRooms(userId)\n      .then(data => {\n        roomDispatch({\n          type: 'fetchSuccess',\n          payload: data.entries,\n        });\n      });\n  }\n  // トークルームを削除する\n  const handleDelete = (roomId) => {\n    deleteRoom(roomId)\n      .then(() => {\n        history.push(`/talk_rooms/${userId}`)\n      });\n  }\n\n  useEffect(() => {\n    Rooms();\n  }, [open.isOpen])\n\n  return (\n    <>\n      <Box sx={{\n        maxWidth: 800\n      }}>\n        <h2>トークルーム</h2>\n        {roomState.fetchState != 'ok' ? <Loading /> :\n          <List sx={{ bgcolor: 'background.paper' }}>\n            {roomState.entries.length == 0 &&\n              <ListItemText>\n                トークしている人はいません。\n              </ListItemText>\n            }\n            {roomState.entries.length != 0 &&\n              roomState.entries.map(entry =>\n                <Box\n                  display='flex'\n                  key={entry.id.toString()\n                  } >\n                  <ListItem\n                    button\n                    divider\n                    onClick={() => history.push(`/talk_rooms/${entry.room_id}`)}\n                  >\n                    <ListItemAvatar>\n                      <AccountCircle sx={{ fontSize: 60 }} />\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={entry.room_id}\n                      secondary='メッセージルームの最後の投稿を記載する予定'\n                    />\n                  </ListItem >\n                  <Button onClick={() => setOpen({ isOpen: true, roomId: entry.room_id })}>\n                    削除\n                  </Button>\n                </Box>\n              )\n            }\n          </List>\n        }\n      </Box>\n\n      <DeleteDialog\n        handleClose={() => setOpen({ isOpen: false })}\n        handleDelete={handleDelete(open.roomId)}\n        message={'トークルームを削除'}\n        open={open.isOpen}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}