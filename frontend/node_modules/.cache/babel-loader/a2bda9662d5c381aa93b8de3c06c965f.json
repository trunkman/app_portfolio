{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Profile.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\"; // Style\n\nimport Box from '@mui/material/Box';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport Tab from '@mui/material/Tab';\nimport TabPanel from '@mui/lab/TabPanel';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport Grid from \"@mui/material/Grid\"; // Api\n\nimport { fetchUser, fetchMicroposts } from \"../../apis/users\"; // Reducer\n\nimport { dataInitialState, dataReducer } from '../../reducer/DataReducer';\nimport { profileInitialState, profileReducer } from '../../reducer/ProfileReducer'; // Component\n\nimport { UserInfo } from \"../../components/UserInfomation/UserInfo\";\nimport { Micropost } from \"../../components/Lists/Micropost\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Profile = ({\n  match,\n  loginUser\n}) => {\n  _s();\n\n  const userId = match.params.id;\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState);\n  const [profileState, profileDispatch] = useReducer(profileReducer, profileInitialState);\n  const [tab, setTab] = useState(0); // ユーザー情報の取得\n\n  const userInformation = () => {\n    fetchUser(userId).then(data => {\n      profileDispatch({\n        type: 'fetchSuccessProfile',\n        payload: {\n          user: data.user,\n          followingIds: data.following_ids,\n          followersIds: data.followers_ids\n        }\n      });\n      dataDispatch({\n        type: 'complete'\n      });\n    });\n  }; // マイクロポスト情報の取得 \n\n\n  const userMicropost = () => {\n    fetchMicroposts(userId).then(data => {\n      profileDispatch({\n        type: 'fetchSuccessMicropost',\n        payload: {\n          microposts: data.microposts,\n          likedMicroposts: data.liked_microposts,\n          comments: data.comments,\n          commentedMicroposts: data.commented_microposts\n        }\n      });\n      dataDispatch({\n        type: 'complete'\n      });\n    });\n  };\n\n  useEffect(() => {\n    userInformation();\n  }, [dataState.user]);\n  useEffect(() => {\n    userMicropost();\n  }, [dataState.user]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      maxWidth: 800,\n      p: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(UserInfo, {\n          loginUser: loginUser,\n          profile: profileState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(TabContext, {\n        value: tab,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            borderBottom: 1,\n            borderColor: 'divider'\n          },\n          children: /*#__PURE__*/_jsxDEV(TabList, {\n            onChange: (event, newTab) => setTab(newTab),\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              icon: /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 26\n              }, this),\n              iconPosition: \"start\",\n              label: \"\\u3064\\u3076\\u3084\\u304D\",\n              value: \"microposts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              icon: /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 23\n              }, this),\n              iconPosition: \"start\",\n              label: \"\\u3044\\u3044\\u306D\",\n              value: \"liked_microposts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              icon: /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 23\n              }, this),\n              iconPosition: \"start\",\n              label: \"\\u30B3\\u30E1\\u30F3\\u30C8\",\n              value: \"comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: \"microposts\",\n          index: 0,\n          children: profileState.microposts.map(micropost => /*#__PURE__*/_jsxDEV(Micropost, {\n            micropost: micropost,\n            loginUser: loginUser,\n            likedStatus: false // profileState.likedMicropostIds.includes(micropost.id)\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: \"liked_microposts\",\n          index: 1,\n          children: profileState.likedMicroposts.map(micropost => /*#__PURE__*/_jsxDEV(Micropost, {\n            micropost: micropost,\n            loginUser: loginUser,\n            likedStatus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: \"comments\",\n          index: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Profile, \"P23EUW7nUbdyWFmFMiuEcmtwHv4=\");\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Profile.jsx"],"names":["React","useState","useEffect","useReducer","Box","TabContext","TabList","Tab","TabPanel","FavoriteIcon","Grid","fetchUser","fetchMicroposts","dataInitialState","dataReducer","profileInitialState","profileReducer","UserInfo","Micropost","Profile","match","loginUser","userId","params","id","dataState","dataDispatch","profileState","profileDispatch","tab","setTab","userInformation","then","data","type","payload","user","followingIds","following_ids","followersIds","followers_ids","userMicropost","microposts","likedMicroposts","liked_microposts","comments","commentedMicroposts","commented_microposts","maxWidth","p","borderBottom","borderColor","event","newTab","map","micropost"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n// Style\nimport Box from '@mui/material/Box';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport Tab from '@mui/material/Tab';\nimport TabPanel from '@mui/lab/TabPanel';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport Grid from \"@mui/material/Grid\";\n// Api\nimport { fetchUser, fetchMicroposts } from \"../../apis/users\";\n// Reducer\nimport { dataInitialState, dataReducer } from '../../reducer/DataReducer';\nimport { profileInitialState, profileReducer } from '../../reducer/ProfileReducer';\n// Component\nimport { UserInfo } from \"../../components/UserInfomation/UserInfo\";\nimport { Micropost } from \"../../components/Lists/Micropost\";\n\n\nexport const Profile = ({\n  match,\n  loginUser,\n}) => {\n  const userId = match.params.id\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState);\n\n  const [profileState, profileDispatch] = useReducer(profileReducer, profileInitialState);\n  const [tab, setTab] = useState(0);\n\n  // ユーザー情報の取得\n  const userInformation = () => {\n    fetchUser(userId)\n      .then(data => {\n        profileDispatch({\n          type: 'fetchSuccessProfile',\n          payload: {\n            user: data.user,\n            followingIds: data.following_ids,\n            followersIds: data.followers_ids,\n          }\n        })\n        dataDispatch({ type: 'complete' })\n      });\n  }\n\n  // マイクロポスト情報の取得 \n  const userMicropost = () => {\n    fetchMicroposts(userId)\n      .then(data => {\n        profileDispatch({\n          type: 'fetchSuccessMicropost',\n          payload: {\n            microposts: data.microposts,\n            likedMicroposts: data.liked_microposts,\n            comments: data.comments,\n            commentedMicroposts: data.commented_microposts,\n          }\n        })\n        dataDispatch({ type: 'complete' })\n      });\n  }\n\n  useEffect(() => { userInformation() }, [dataState.user])\n  useEffect(() => { userMicropost() }, [dataState.user])\n\n  return (\n    <Box sx={{\n      maxWidth: 800,\n      p: 2,\n    }}>\n      <Box>\n      </Box>\n      <Grid container >\n        <Grid item xs={12}>\n          <UserInfo\n            loginUser={loginUser}\n            profile={profileState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          {/* <SleepInfo /> */}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          {/* <RecomendBook/> */}\n        </Grid>\n      </Grid>\n      <Box>\n        <TabContext value={tab}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <TabList onChange={(event, newTab) => setTab(newTab)} >\n              <Tab icon={<FavoriteIcon />}\n                iconPosition=\"start\"\n                label=\"つぶやき\"\n                value=\"microposts\"\n              />\n              <Tab\n                icon={<FavoriteIcon />}\n                iconPosition=\"start\"\n                label=\"いいね\"\n                value=\"liked_microposts\"\n              />\n              <Tab\n                icon={<FavoriteIcon />}\n                iconPosition=\"start\"\n                label=\"コメント\"\n                value=\"comments\"\n              />\n            </TabList>\n          </Box>\n          <TabPanel value=\"microposts\" index={0}>\n            {\n              profileState.microposts.map(micropost =>\n                <Micropost\n                  micropost={micropost}\n                  loginUser={loginUser}\n                  likedStatus={\n                    false\n                    // profileState.likedMicropostIds.includes(micropost.id)\n                  }\n                />\n              )\n            }\n          </TabPanel>\n          <TabPanel value=\"liked_microposts\" index={1}>\n            {\n              profileState.likedMicroposts.map(micropost =>\n                <Micropost\n                  micropost={micropost}\n                  loginUser={loginUser}\n                  likedStatus={true}\n                />\n              )\n            }\n          </TabPanel>\n          <TabPanel value=\"comments\" index={2}>\n\n          </TabPanel>\n        </TabContext>\n      </Box>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}