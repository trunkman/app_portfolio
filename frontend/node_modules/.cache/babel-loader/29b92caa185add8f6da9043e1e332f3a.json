{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Profile.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'; // styled\n\nimport { Grid, Typography } from \"@mui/material\";\nimport Box from '@mui/material/Box'; // api\n\nimport { fetchUser } from \"../../apis/users\"; // reducer\n\nimport { dataInitialState, dataReducer } from '../../reducer/DataFetchReducer'; // コンポーネント\n\nimport { MyProfile } from \"../../components/Users/MyProfile\";\nimport { Followers } from \"../../components/Users/Followers\";\nimport { AvatarButton } from \"../../components/Navigations/AvatarButton\";\nimport { Calendar } from \"../../components/Diaries/Calendar\";\nimport { Microposts } from \"./Microposts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Profile = props => {\n  _s();\n\n  const userId = props.match.params.id;\n  const [user, setUser] = useState('No Name');\n  const [followingIds, setFollowingIds] = useState([]);\n  const [followersIds, setFollowersIds] = useState([]);\n  const [micropostIds, setMicropostIds] = useState([]);\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState); // ユーザー情報の取得\n\n  useEffect(() => {\n    fetchUser({\n      userId: userId\n    }).then(data => {\n      setUser(data.user);\n      setFollowingIds(data.following_ids);\n      setFollowersIds(data.followers_ids);\n      setMicropostIds(data.micropost_Ids);\n      dataDispatch({\n        type: 'complete'\n      });\n    });\n    return () => {\n      setUser([]);\n    };\n  }, [dataState.user]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      border: 0.2,\n      p: 2,\n      maxWidth: 800\n    },\n    children: [/*#__PURE__*/_jsxDEV(MyProfile, {\n      dataUserFetching: () => dataDispatch({\n        type: 'user'\n      }),\n      dataFollowingFetching: () => dataDispatch({\n        type: 'following'\n      }),\n      dataFollowersFetching: () => dataDispatch({\n        type: 'followers'\n      }),\n      loginUser: props.loginUser,\n      isLoggedIn: props.isLoggedIn,\n      user: user,\n      userId: userId,\n      followingIds: followingIds,\n      followersIds: followersIds,\n      micropostIds: micropostIds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Microposts, {\n      userId: userId,\n      loginUser: props.loginUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Profile, \"X8rnwqnFB3rkCgY7/1LWKwXrQwM=\");\n\n_c = Profile;\n{\n  /* <Grid item xs={12} sm={8} sx={{ px: 2, bgcolor: 'grey.200' }}>\n   <AvatarButton user={user} size=\"45\" />\n   <MyProfile\n     dataFetching={() => setIsFetching(true)}\n     loginUser={props.loginUser}\n     isLoggedIn={props.isLoggedIn}\n     user={user}\n     microposts={microposts}\n     following={following}\n     followers={followers}\n   />\n  </Grid> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Profile.jsx"],"names":["React","useState","useEffect","useReducer","BrowserRouter","Switch","Route","Grid","Typography","Box","fetchUser","dataInitialState","dataReducer","MyProfile","Followers","AvatarButton","Calendar","Microposts","Profile","props","userId","match","params","id","user","setUser","followingIds","setFollowingIds","followersIds","setFollowersIds","micropostIds","setMicropostIds","dataState","dataDispatch","then","data","following_ids","followers_ids","micropost_Ids","type","display","flexDirection","justifyContent","alignItems","border","p","maxWidth","loginUser","isLoggedIn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n// styled\nimport { Grid, Typography } from \"@mui/material\";\nimport Box from '@mui/material/Box';\n// api\nimport { fetchUser } from \"../../apis/users\";\n// reducer\nimport { dataInitialState, dataReducer } from '../../reducer/DataFetchReducer';\n// コンポーネント\nimport { MyProfile } from \"../../components/Users/MyProfile\";\nimport { Followers } from \"../../components/Users/Followers\";\nimport { AvatarButton } from \"../../components/Navigations/AvatarButton\";\nimport { Calendar } from \"../../components/Diaries/Calendar\";\nimport { Microposts } from \"./Microposts\";\n\n\nexport const Profile = (props) => {\n  const userId = props.match.params.id\n  const [user, setUser] = useState('No Name')\n  const [followingIds, setFollowingIds] = useState([])\n  const [followersIds, setFollowersIds] = useState([])\n  const [micropostIds, setMicropostIds] = useState([])\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState)\n  // ユーザー情報の取得\n  useEffect(() => {\n    fetchUser({ userId: userId })\n      .then(data => {\n        setUser(data.user)\n        setFollowingIds(data.following_ids)\n        setFollowersIds(data.followers_ids)\n        setMicropostIds(data.micropost_Ids)\n        dataDispatch({ type: 'complete' })\n      })\n    return () => {\n      setUser([])\n    }\n  }, [dataState.user])\n\n  return (\n    <Box sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      border: 0.2,\n      p: 2,\n      maxWidth: 800,\n    }}>\n      <MyProfile\n        dataUserFetching={() => dataDispatch({ type: 'user' })}\n        dataFollowingFetching={() => dataDispatch({ type: 'following' })}\n        dataFollowersFetching={() => dataDispatch({ type: 'followers' })}\n        loginUser={props.loginUser}\n        isLoggedIn={props.isLoggedIn}\n        user={user}\n        userId={userId}\n        followingIds={followingIds}\n        followersIds={followersIds}\n        micropostIds={micropostIds}\n      />\n      <Microposts\n        userId={userId}\n        loginUser={props.loginUser}\n      />\n    </Box>\n  )\n}\n\n{/* <Grid item xs={12} sm={8} sx={{ px: 2, bgcolor: 'grey.200' }}>\n  <AvatarButton user={user} size=\"45\" />\n  <MyProfile\n    dataFetching={() => setIsFetching(true)}\n    loginUser={props.loginUser}\n    isLoggedIn={props.isLoggedIn}\n    user={user}\n    microposts={microposts}\n    following={following}\n    followers={followers}\n  />\n</Grid> */}\n"]},"metadata":{},"sourceType":"module"}