{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/components/UserInfomation/Calendar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useReducer } from \"react\";\nimport { useCallback } from 'react'; // Style\n\nimport { Emoji } from 'emoji-mart';\nimport Button from \"@mui/material/Button\";\nimport FullCalendar, { EventContentArg } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin, { DateClickArg } from '@fullcalendar/interaction';\nimport Box from '@mui/material/Box'; // Api\n\nimport { fetchUserDiaries } from \"../../apis/users\"; // Reducer\n\nimport { dialogReducer, dialogInitialState } from '../../reducer/DialogReducer'; // Component\n\nimport { RecordDialog } from \"../Dialogs/RecordDialog\";\nimport { DiaryDialog } from \"../Dialogs/DiaryDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Calendar = props => {\n  _s();\n\n  const [diaries, setDiaries] = useState([]);\n  const [dialogState, dialogDispatch] = useReducer(dialogReducer, dialogInitialState);\n\n  const handleClose = () => dialogDispatch({\n    type: 'close'\n  });\n\n  const handleDateClick = useCallback(DateClickArg => {\n    dialogDispatch({\n      type: 'diary'\n    });\n  }, []); // const renderEventContent = (eventInfo: EventContentArg) => (\n  //   <Emoji\n  //     emoji={eventInfo.event.title}\n  //     size={32}\n  //     onClick={() => dialogDispatch({ type: 'diary' })}\n  //   />\n  // )\n\n  useEffect(() => {\n    fetchUserDiaries(props.userId).then(data => {\n      setDiaries(data.diaries);\n    });\n  }, [dialogState.record, dialogState.diary]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      locale: \"ja\",\n      events: diaries,\n      dateClick: handleDateClick,\n      eventContent: renderEventContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecordDialog, {\n      handleClose: handleClose,\n      open: dialogState.record\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryDialog, {\n      handleClose: handleClose,\n      open: dialogState.diary // date={arg.dateStr}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"qMY6Qk4nVDZ9r+6nRGKZUIpsxmE=\");\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/components/UserInfomation/Calendar.jsx"],"names":["React","useEffect","useState","useReducer","useCallback","Emoji","Button","FullCalendar","EventContentArg","dayGridPlugin","interactionPlugin","DateClickArg","Box","fetchUserDiaries","dialogReducer","dialogInitialState","RecordDialog","DiaryDialog","Calendar","props","diaries","setDiaries","dialogState","dialogDispatch","handleClose","type","handleDateClick","userId","then","data","record","diary","renderEventContent"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CACA;;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,YAAP,IAAuBC,eAAvB,QAA8C,qBAA9C;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,iBAAP,IAA4BC,YAA5B,QAAgD,2BAAhD;AACA,OAAOC,GAAP,MAAgB,mBAAhB,C,CACA;;AACA,SAASC,gBAAT,QAAiC,kBAAjC,C,CACA;;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,6BAAlD,C,CACA;;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCpB,UAAU,CAACW,aAAD,EAAgBC,kBAAhB,CAAhD;;AACA,QAAMS,WAAW,GAAG,MAAMD,cAAc,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAxC;;AAEA,QAAMC,eAAe,GAAGtB,WAAW,CAAEO,YAAD,IAAkB;AACpDY,IAAAA,cAAc,CAAC;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAd;AACD,GAFkC,EAEhC,EAFgC,CAAnC,CALiC,CASjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAxB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,gBAAgB,CAACM,KAAK,CAACQ,MAAP,CAAhB,CACGC,IADH,CACQC,IAAI,IAAI;AACZR,MAAAA,UAAU,CAACQ,IAAI,CAACT,OAAN,CAAV;AACD,KAHH;AAID,GALQ,EAKN,CAACE,WAAW,CAACQ,MAAb,EAAqBR,WAAW,CAACS,KAAjC,CALM,CAAT;AAQA,sBACE,QAAC,GAAD;AAAA,4BACE,QAAC,YAAD;AACE,MAAA,OAAO,EAAE,CAACtB,aAAD,EAAgBC,iBAAhB,CADX;AAEE,MAAA,WAAW,EAAC,cAFd;AAGE,MAAA,MAAM,EAAC,IAHT;AAIE,MAAA,MAAM,EAAEU,OAJV;AAKE,MAAA,SAAS,EAAEM,eALb;AAME,MAAA,YAAY,EAAEM;AANhB;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,YAAD;AACE,MAAA,WAAW,EAAER,WADf;AAEE,MAAA,IAAI,EAAEF,WAAW,CAACQ;AAFpB;AAAA;AAAA;AAAA;AAAA,YAXF,eAgBE,QAAE,WAAF;AACE,MAAA,WAAW,EAAEN,WADf;AAEE,MAAA,IAAI,EAAEF,WAAW,CAACS,KAFpB,CAGA;;AAHA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAjDM;;GAAMb,Q;;KAAAA,Q","sourcesContent":["import React, { useEffect, useState, useReducer } from \"react\";\nimport { useCallback } from 'react';\n// Style\nimport { Emoji } from 'emoji-mart';\nimport Button from \"@mui/material/Button\";\nimport FullCalendar, { EventContentArg } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin, { DateClickArg } from '@fullcalendar/interaction';\nimport Box from '@mui/material/Box';\n// Api\nimport { fetchUserDiaries } from \"../../apis/users\";\n// Reducer\nimport { dialogReducer, dialogInitialState } from '../../reducer/DialogReducer'\n// Component\nimport { RecordDialog } from \"../Dialogs/RecordDialog\"\nimport { DiaryDialog } from \"../Dialogs/DiaryDialog\"\n\nexport const Calendar = (props) => {\n  const [diaries, setDiaries] = useState([])\n  const [dialogState, dialogDispatch] = useReducer(dialogReducer, dialogInitialState);\n  const handleClose = () => dialogDispatch({ type: 'close' })\n\n  const handleDateClick = useCallback((DateClickArg) => {\n    dialogDispatch({ type: 'diary' })\n  }, [])\n\n  // const renderEventContent = (eventInfo: EventContentArg) => (\n  //   <Emoji\n  //     emoji={eventInfo.event.title}\n  //     size={32}\n  //     onClick={() => dialogDispatch({ type: 'diary' })}\n  //   />\n  // )\n\n  useEffect(() => {\n    fetchUserDiaries(props.userId)\n      .then(data => {\n        setDiaries(data.diaries)\n      })\n  }, [dialogState.record, dialogState.diary])\n\n\n  return (\n    <Box>\n      <FullCalendar\n        plugins={[dayGridPlugin, interactionPlugin]}\n        initialView=\"dayGridMonth\"\n        locale=\"ja\"\n        events={diaries}\n        dateClick={handleDateClick}\n        eventContent={renderEventContent}\n      />\n\n\n      <RecordDialog\n        handleClose={handleClose}\n        open={dialogState.record}\n      />\n\n      < DiaryDialog\n        handleClose={handleClose}\n        open={dialogState.diary}\n      // date={arg.dateStr}\n      />\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}