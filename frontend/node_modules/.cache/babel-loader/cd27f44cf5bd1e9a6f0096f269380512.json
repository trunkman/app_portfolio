{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext, createContext } from 'react';\nimport './App.css';\nimport { AuthContextProvider } from './context/AuthContext'; // styles\n\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline'; // api\n\nimport { fetchLoggedIn } from './apis/sessions'; // reducer\n\nimport { authInitialState, authReducer } from './reducer/AuthReducer'; // コンテイナー\n\nimport { Layout } from './containers/Layout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport default function App() {\n  _s();\n\n  const [authStatus, authDispatch] = useReducer(authReducer, authInitialState);\n  useEffect(() => {\n    fetchLoggedIn().then(data => {\n      if (data.logged_in && authStatus.loggedIn === false) {\n        authDispatch({\n          type: 'login',\n          payload: data.user\n        });\n      } else if (!data.logged_in && authStatus.loggedIn === true) {\n        authDispatch({\n          type: 'logout'\n        });\n      }\n    });\n  }, []); // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [loginUser, setLoginUser] = useState({});\n  // // ログイン&ログアウト実行のコールバック関数\n  // const handleLogIn = (loginUser) => {\n  //   setIsLoggedIn(true);\n  //   setLoginUser(loginUser);\n  // }\n  // const handleLogOut = () => {\n  //   setIsLoggedIn(false);\n  //   setLoginUser({});\n  // }\n  // // ログイン状態を保持する\n  // useEffect(() => {\n  //   fetchLoggedIn()\n  //     .then(data => {\n  //       if (data.logged_in && isLoggedIn === false) {\n  //         handleLogIn(data.user)\n  //       } else if (!data.logged_in && isLoggedIn === true) {\n  //         handleLogOut()\n  //       }\n  //     })\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        authState,\n        authDispatch\n      },\n      children: /*#__PURE__*/_jsxDEV(Layout // handleLogOut={handleLogOut}\n      // handleLogIn={handleLogIn}\n      // isLoggedIn={isLoggedIn}\n      // loginUser={loginUser}\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"D2ZdyZ0z/gDiK3jlZTURH1RbOaQ=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/App.jsx"],"names":["React","useState","useEffect","useReducer","useContext","createContext","AuthContextProvider","Box","CssBaseline","fetchLoggedIn","authInitialState","authReducer","Layout","AuthContext","App","authStatus","authDispatch","then","data","logged_in","loggedIn","type","payload","user","display","authState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,UAAjD,EAA6DC,aAA7D,QAAkF,OAAlF;AACA,OAAO,WAAP;AACA,SAASC,mBAAT,QAAoC,uBAApC,C,CACA;;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CACA;;AACA,SAASC,aAAT,QAA8B,iBAA9B,C,CACA;;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,uBAA9C,C,CACA;;AACA,SAASC,MAAT,QAAuB,qBAAvB;;AAEA,OAAO,MAAMC,WAAW,gBAAGR,aAAa,EAAjC;AAEP,eAAe,SAASS,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6Bb,UAAU,CAACQ,WAAD,EAAcD,gBAAd,CAA7C;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa,GACVQ,IADH,CACQC,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACC,SAAL,IAAkBJ,UAAU,CAACK,QAAX,KAAwB,KAA9C,EAAqD;AACnDJ,QAAAA,YAAY,CAAC;AACXK,UAAAA,IAAI,EAAE,OADK;AAEXC,UAAAA,OAAO,EAAEJ,IAAI,CAACK;AAFH,SAAD,CAAZ;AAID,OALD,MAKO,IAAI,CAACL,IAAI,CAACC,SAAN,IAAmBJ,UAAU,CAACK,QAAX,KAAwB,IAA/C,EAAqD;AAC1DJ,QAAAA,YAAY,CAAC;AACXK,UAAAA,IAAI,EAAE;AADK,SAAD,CAAZ;AAGD;AACF,KAZH;AAaD,GAdQ,EAcN,EAdM,CAAT,CAH4B,CAmB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAEG,MAAAA,OAAO,EAAE;AAAX,KAAT;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAF;AAAaT,QAAAA;AAAb,OAA7B;AAAA,6BACE,QAAC,MAAD,CACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAvDuBF,G;;KAAAA,G","sourcesContent":["import React, { useState, useEffect, useReducer, useContext, createContext } from 'react';\nimport './App.css';\nimport { AuthContextProvider } from './context/AuthContext'\n// styles\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\n// api\nimport { fetchLoggedIn } from './apis/sessions';\n// reducer\nimport { authInitialState, authReducer } from './reducer/AuthReducer'\n// コンテイナー\nimport { Layout } from './containers/Layout';\n\nexport const AuthContext = createContext()\n\nexport default function App() {\n  const [authStatus, authDispatch] = useReducer(authReducer, authInitialState)\n\n  useEffect(() => {\n    fetchLoggedIn()\n      .then(data => {\n        if (data.logged_in && authStatus.loggedIn === false) {\n          authDispatch({\n            type: 'login',\n            payload: data.user,\n          })\n        } else if (!data.logged_in && authStatus.loggedIn === true) {\n          authDispatch({\n            type: 'logout',\n          })\n        }\n      })\n  }, [])\n\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [loginUser, setLoginUser] = useState({});\n  // // ログイン&ログアウト実行のコールバック関数\n  // const handleLogIn = (loginUser) => {\n  //   setIsLoggedIn(true);\n  //   setLoginUser(loginUser);\n  // }\n  // const handleLogOut = () => {\n  //   setIsLoggedIn(false);\n  //   setLoginUser({});\n  // }\n  // // ログイン状態を保持する\n  // useEffect(() => {\n  //   fetchLoggedIn()\n  //     .then(data => {\n  //       if (data.logged_in && isLoggedIn === false) {\n  //         handleLogIn(data.user)\n  //       } else if (!data.logged_in && isLoggedIn === true) {\n  //         handleLogOut()\n  //       }\n  //     })\n  // }, [])\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <AuthContext.Provider value={{ authState, authDispatch }}>\n        <Layout\n        // handleLogOut={handleLogOut}\n        // handleLogIn={handleLogIn}\n        // isLoggedIn={isLoggedIn}\n        // loginUser={loginUser}\n        />\n      </AuthContext.Provider>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}