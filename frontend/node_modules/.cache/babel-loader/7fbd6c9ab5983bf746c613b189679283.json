{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/containers/Pages/Microposts.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Link from '@mui/material/Link'; // styled\n\nimport { ListItemAvatar, Typography } from \"@mui/material\";\nimport ListItem from \"@mui/material/ListItem\";\nimport List from '@mui/material/List';\nimport ListItemText from '@mui/material/ListItemText';\nimport Grid from \"@mui/material/Grid\";\nimport Box from '@mui/material/Box'; // アイコン\n\nimport AccountCircle from \"@mui/icons-material/AccountCircle\"; // api\n\nimport { deleteMicropost } from \"../../apis/microposts\";\nimport { deleteComment } from \"../../apis/comments\";\nimport { fetchMicroposts } from \"../../apis/users\"; // reducer\n\nimport { dataInitialState, dataReducer } from '../../reducer/DataFetchReducer'; // コンポーネント\n\nimport { LikeButton } from \"../../components/Buttons/LikeButton\";\nimport { CommentButton } from \"../../components/Buttons/CommentButton\";\nimport { Micropost } from \"../../components/Microposts/Micropost\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Microposts = props => {\n  _s();\n\n  const [microposts, setMicroposts] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [likedMicropostIds, setLikedMicropostIds] = useState([]);\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState);\n\n  const dataFatching = () => dataDispatch({\n    type: 'microposts'\n  }); // 投稿一覧を取得する\n\n\n  useEffect(() => {\n    fetchMicroposts({\n      userId: props.userId\n    }).then(data => {\n      setMicroposts(data.microposts);\n      setComments(data.comments);\n      setLikedMicropostIds(data.liked_micropost_ids);\n      dataDispatch({\n        type: 'complete'\n      });\n    });\n    return () => setMicroposts([]);\n  }, []); // 投稿を削除する（投稿者のみ実行可能）\n\n  const deleteSubmit = micropostId => {\n    deleteMicropost(micropostId).then(dataFatching);\n  }; // コメントを削除する（投稿者のみ実行可能）\n\n\n  const deleteCommentSubmit = commentId => {\n    deleteComment(commentId).then(dataFatching);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        bgcolor: 'background.paper'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u6295\\u7A3F\\u4E00\\u89A7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [microposts.length, \" \\u3064\\u3076\\u3084\\u304D : \", comments.length, \" \\u30B3\\u30E1\\u30F3\\u30C8\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleOpenPost,\n        children: \"\\u6295\\u7A3F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MicropostDialog, {\n        handleClose: handleClosePost,\n        open: openDialogPost,\n        user: props.loginUser,\n        dataFetching: props.dataFetching\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), microposts.map(micropost => /*#__PURE__*/_jsxDEV(Micropost, {\n        micropost: micropost,\n        loginUserId: props.loginUser.id,\n        likedStatus: likedMicropostIds.includes(micropost.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this) // <ListItem key={micropost.id.toString()}>\n      //   <ListItemAvatar>\n      //     <AccountCircle sx={{ fontSize: 40 }} />\n      //   </ListItemAvatar>\n      //   <ListItemText\n      //     component=\"div\"\n      //     primary={micropost.id}\n      //     secondary={micropost.created_at}\n      //   />\n      //   {props.loginUser.id === micropost.user_id && (\n      //     <Link component=\"div\" onClick={() => deleteSubmit(micropost.id)}>\n      //       delete\n      //     </Link>\n      //   )}\n      //   <Typography variant=\"body1\" pl={2}>\n      //     {micropost.content}\n      //   </Typography>\n      //   <LikeButton\n      //     loginUserId={props.loginUser.id}\n      //     micropostId={micropost.id}\n      //     likedStatus={likedMicropostIds.includes(micropost.id)}\n      //   />\n      //   <CommentButton\n      //     loginUserId={props.loginUser.id}\n      //     micropostId={micropost.id}\n      //   />\n      // </ListItem >\n      ), comments.map(comment => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(AccountCircle, {\n            sx: {\n              fontSize: 40\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          component: \"div\",\n          primary: comment.id,\n          secondary: comment.created_at\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this), props.loginUser.id === comment.user_id && /*#__PURE__*/_jsxDEV(Link, {\n          component: \"div\",\n          onClick: () => deleteCommentSubmit(comment.id),\n          children: \"delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          pl: 2,\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n          loginUserId: props.loginUser.id,\n          micropostId: comment.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CommentButton, {\n          loginUserId: props.loginUser.id,\n          micropostId: comment.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Microposts, \"zLc5Pn39fK8HMchTzeuEC464bVs=\");\n\n_c = Microposts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Microposts\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/containers/Pages/Microposts.jsx"],"names":["React","useState","useEffect","Link","ListItemAvatar","Typography","ListItem","List","ListItemText","Grid","Box","AccountCircle","deleteMicropost","deleteComment","fetchMicroposts","dataInitialState","dataReducer","LikeButton","CommentButton","Micropost","Microposts","props","microposts","setMicroposts","comments","setComments","likedMicropostIds","setLikedMicropostIds","dataState","dataDispatch","useReducer","dataFatching","type","userId","then","data","liked_micropost_ids","deleteSubmit","micropostId","deleteCommentSubmit","commentId","bgcolor","length","handleOpenPost","handleClosePost","openDialogPost","loginUser","dataFetching","map","micropost","id","includes","comment","fontSize","created_at","user_id","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Link from '@mui/material/Link';\n// styled\nimport { ListItemAvatar, Typography } from \"@mui/material\";\nimport ListItem from \"@mui/material/ListItem\";\nimport List from '@mui/material/List';\nimport ListItemText from '@mui/material/ListItemText';\nimport Grid from \"@mui/material/Grid\";\nimport Box from '@mui/material/Box';\n\n// アイコン\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\n// api\nimport { deleteMicropost } from \"../../apis/microposts\";\nimport { deleteComment } from \"../../apis/comments\";\nimport { fetchMicroposts } from \"../../apis/users\";\n// reducer\nimport { dataInitialState, dataReducer } from '../../reducer/DataFetchReducer'\n  ;\n// コンポーネント\nimport { LikeButton } from \"../../components/Buttons/LikeButton\";\nimport { CommentButton } from \"../../components/Buttons/CommentButton\"\nimport { Micropost } from \"../../components/Microposts/Micropost\";\n\nexport const Microposts = (props) => {\n  const [microposts, setMicroposts] = useState([])\n  const [comments, setComments] = useState([])\n  const [likedMicropostIds, setLikedMicropostIds] = useState([])\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState)\n  const dataFatching = () => dataDispatch({ type: 'microposts' })\n\n  // 投稿一覧を取得する\n  useEffect(() => {\n    fetchMicroposts({ userId: props.userId })\n      .then(data => {\n        setMicroposts(data.microposts)\n        setComments(data.comments)\n        setLikedMicropostIds(data.liked_micropost_ids)\n        dataDispatch({ type: 'complete' })\n      })\n    return () => setMicroposts([])\n  }, [])\n  // 投稿を削除する（投稿者のみ実行可能）\n  const deleteSubmit = (micropostId) => {\n    deleteMicropost(micropostId)\n      .then(dataFatching)\n  }\n  // コメントを削除する（投稿者のみ実行可能）\n  const deleteCommentSubmit = (commentId) => {\n    deleteComment(commentId)\n      .then(dataFatching)\n  }\n\n  return (\n    <Box>\n      <List sx={{ bgcolor: 'background.paper' }}>\n        <h2>投稿一覧</h2>\n        <p>{microposts.length} つぶやき : {comments.length} コメント</p>\n        <Button variant=\"contained\" onClick={handleOpenPost}>\n          投稿\n        </Button>\n        <MicropostDialog\n          handleClose={handleClosePost}\n          open={openDialogPost}\n          user={props.loginUser}\n          dataFetching={props.dataFetching}\n        />\n        {\n          microposts.map(micropost =>\n            <Micropost\n              micropost={micropost}\n              loginUserId={props.loginUser.id}\n              likedStatus={likedMicropostIds.includes(micropost.id)}\n            />\n            // <ListItem key={micropost.id.toString()}>\n            //   <ListItemAvatar>\n            //     <AccountCircle sx={{ fontSize: 40 }} />\n            //   </ListItemAvatar>\n            //   <ListItemText\n            //     component=\"div\"\n            //     primary={micropost.id}\n            //     secondary={micropost.created_at}\n            //   />\n            //   {props.loginUser.id === micropost.user_id && (\n            //     <Link component=\"div\" onClick={() => deleteSubmit(micropost.id)}>\n            //       delete\n            //     </Link>\n            //   )}\n            //   <Typography variant=\"body1\" pl={2}>\n            //     {micropost.content}\n            //   </Typography>\n            //   <LikeButton\n            //     loginUserId={props.loginUser.id}\n            //     micropostId={micropost.id}\n            //     likedStatus={likedMicropostIds.includes(micropost.id)}\n            //   />\n            //   <CommentButton\n            //     loginUserId={props.loginUser.id}\n            //     micropostId={micropost.id}\n            //   />\n            // </ListItem >\n          )\n        }\n\n        {\n          comments.map(comment =>\n            <ListItem key={comment.id}>\n              <ListItemAvatar>\n                <AccountCircle sx={{ fontSize: 40 }} />\n              </ListItemAvatar>\n              <ListItemText\n                component=\"div\"\n                primary={comment.id}\n                secondary={comment.created_at}\n              />\n              {props.loginUser.id === comment.user_id && (\n                <Link component=\"div\" onClick={() => deleteCommentSubmit(comment.id)}>\n                  delete\n                </Link>\n              )}\n              <Typography variant=\"body1\" pl={2}>\n                {comment.content}\n              </Typography>\n              <LikeButton\n                loginUserId={props.loginUser.id}\n                micropostId={comment.id}\n              />\n              <CommentButton\n                loginUserId={props.loginUser.id}\n                micropostId={comment.id}\n              />\n            </ListItem >\n          )\n        }\n      </List>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}