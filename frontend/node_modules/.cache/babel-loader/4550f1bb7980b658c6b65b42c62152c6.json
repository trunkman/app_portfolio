{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/app/frontend/src/components/Dialogs/NotificationDialog.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react'; // Style\n\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport List from \"@material-ui/core/List\"; // Icon\n\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined'; // Api\n\nimport { fetchNotifications, deleteNotifications } from '../../apis/notifications'; // Reducer\n\nimport { dialogReducer, dialogInitialState } from '../../reducer/DialogReducer';\nimport { notificationReducer, notificationInitialState } from '../../reducer/NotificationReducer'; // Component\n\nimport { NotificationComment } from '../Items/NotificationComment';\nimport { NotificationEntry } from '../Items/NotificationEntry';\nimport { NotificationFollow } from '../Items/NotificationFollow';\nimport { NotificationLike } from '../Items/NotificationLike';\nimport { MicropostDialog } from \"../Dialogs/MicropostDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => createStyles({\n  'title': {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  'button': {\n    background: '#42a5f5',\n    border: 0,\n    borderRadius: 3,\n    color: 'white',\n    height: 30,\n    padding: '15px 10px'\n  }\n}));\nexport const NotificationDialog = ({\n  handleClose,\n  open\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [notificationState, notificationDispatch] = useReducer(notificationReducer, notificationInitialState);\n  const [dialogState, dialogDispatch] = useReducer(dialogReducer, dialogInitialState);\n  const [micropostId, setMicropostId] = useState(); // 通知一覧を取得する\n\n  const notifications = () => {\n    fetchNotifications().then(data => {\n      data && notificationDispatch({\n        type: 'fetchSuccess',\n        payload: data.notifications\n      });\n    });\n  }; // チェック済み通知をすべて削除する\n\n\n  const allDelete = () => {\n    deleteNotifications().then(data => {\n      notificationDispatch({\n        type: 'fetchSuccess',\n        payload: data.notifications\n      });\n      notifications();\n    });\n  }; // 投稿ダイアログを表示\n\n\n  const handleClick = e => {\n    setMicropostId(e.target.value);\n    handleClose();\n    dialogDispatch({\n      type: 'microposts'\n    });\n  };\n\n  useEffect(() => {\n    notifications();\n  }, [open]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [open && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      scroll: \"paper\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        className: classes.title,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: \"\\u901A\\u77E5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.button,\n          onClick: allDelete,\n          children: [/*#__PURE__*/_jsxDEV(DeleteOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), \"\\u3059\\u3079\\u3066\\u524A\\u9664\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: notificationState.notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u901A\\u77E5\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 63\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(List, {\n              children: notificationState.notifications.map(element => /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [element.notification.action === 'like' && /*#__PURE__*/_jsxDEV(NotificationLike, {\n                  handleClose: handleClose,\n                  notification: element.notification,\n                  visitor_user: element.visitor_user,\n                  handleClick: handleClick\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 27\n                }, this), element.notification.action === 'comment' && /*#__PURE__*/_jsxDEV(NotificationComment, {\n                  handleClose: handleClose,\n                  notification: element.notification,\n                  visitor_user: element.visitor_user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 27\n                }, this), element.notification.action === 'follow' && /*#__PURE__*/_jsxDEV(NotificationFollow, {\n                  handleClose: handleClose,\n                  notification: element.notification,\n                  visitor_user: element.visitor_user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 27\n                }, this), element.notification.action === 'entry' && /*#__PURE__*/_jsxDEV(NotificationEntry, {\n                  handleClose: handleClose,\n                  notification: element.notification,\n                  visitor_user: element.visitor_user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            handleClose();\n          },\n          children: \"\\u9589\\u3058\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MicropostDialog, {\n      handleClose: handleClose,\n      micropostId: micropostId,\n      open: dialogState.micropost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(NotificationDialog, \"2qJcfA0HPAkFfYKF75XkfTvWXpk=\", false, function () {\n  return [useStyles];\n});\n\n_c = NotificationDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotificationDialog\");","map":{"version":3,"sources":["/home/ubuntu/app/frontend/src/components/Dialogs/NotificationDialog.jsx"],"names":["React","useState","useEffect","useReducer","Button","Box","createStyles","makeStyles","Dialog","DialogActions","DialogTitle","DialogContent","DialogContentText","List","DeleteOutlinedIcon","fetchNotifications","deleteNotifications","dialogReducer","dialogInitialState","notificationReducer","notificationInitialState","NotificationComment","NotificationEntry","NotificationFollow","NotificationLike","MicropostDialog","useStyles","display","justifyContent","background","border","borderRadius","color","height","padding","NotificationDialog","handleClose","open","classes","notificationState","notificationDispatch","dialogState","dialogDispatch","micropostId","setMicropostId","notifications","then","data","type","payload","allDelete","handleClick","e","target","value","title","button","length","map","element","notification","action","visitor_user","micropost"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n// Style\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport List from \"@material-ui/core/List\";\n// Icon\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\n// Api\nimport { fetchNotifications, deleteNotifications } from '../../apis/notifications';\n// Reducer\nimport { dialogReducer, dialogInitialState } from '../../reducer/DialogReducer'\nimport { notificationReducer, notificationInitialState } from '../../reducer/NotificationReducer'\n// Component\nimport { NotificationComment } from '../Items/NotificationComment';\nimport { NotificationEntry } from '../Items/NotificationEntry';\nimport { NotificationFollow } from '../Items/NotificationFollow';\nimport { NotificationLike } from '../Items/NotificationLike';\nimport { MicropostDialog } from \"../Dialogs/MicropostDialog\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    'title': {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n    'button': {\n      background: '#42a5f5',\n      border: 0,\n      borderRadius: 3,\n      color: 'white',\n      height: 30,\n      padding: '15px 10px',\n    }\n  }),\n);\n\nexport const NotificationDialog = ({\n  handleClose,\n  open,\n}) => {\n  const classes = useStyles();\n  const [notificationState, notificationDispatch] = useReducer(notificationReducer, notificationInitialState);\n  const [dialogState, dialogDispatch] = useReducer(dialogReducer, dialogInitialState);\n  const [micropostId, setMicropostId] = useState();\n  // 通知一覧を取得する\n  const notifications = () => {\n    fetchNotifications()\n      .then(data => {\n        data &&\n          notificationDispatch({\n            type: 'fetchSuccess',\n            payload: data.notifications,\n          });\n      });\n  }\n  // チェック済み通知をすべて削除する\n  const allDelete = () => {\n    deleteNotifications()\n      .then(data => {\n        notificationDispatch({\n          type: 'fetchSuccess',\n          payload: data.notifications,\n        });\n        notifications();\n      });\n  }\n  // 投稿ダイアログを表示\n  const handleClick = e => {\n    setMicropostId(e.target.value);\n    handleClose();\n    dialogDispatch({ type: 'microposts' });\n  }\n\n  useEffect(() => {\n    notifications();\n  }, [open])\n\n  return (\n    <>\n      {open &&\n\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          scroll='paper'\n        >\n          <DialogTitle className={classes.title}>\n            <Box>\n              通知\n            </Box>\n            <Button className={classes.button} onClick={allDelete}>\n              <DeleteOutlinedIcon />\n              すべて削除\n            </Button>\n          </DialogTitle>\n          <DialogContent dividers>\n            <DialogContentText >\n              {notificationState.notifications.length === 0 ? <p>通知はありません</p> :\n                <>\n                  <List>\n                    {notificationState.notifications.map(element =>\n                      <>\n                        {element.notification.action === 'like' &&\n                          <NotificationLike\n                            handleClose={handleClose}\n                            notification={element.notification}\n                            visitor_user={element.visitor_user}\n                            handleClick={handleClick}\n                          />\n                        }\n                        {element.notification.action === 'comment' &&\n                          <NotificationComment\n                            handleClose={handleClose}\n                            notification={element.notification}\n                            visitor_user={element.visitor_user}\n                          />\n                        }\n                        {element.notification.action === 'follow' &&\n                          <NotificationFollow\n                            handleClose={handleClose}\n                            notification={element.notification}\n                            visitor_user={element.visitor_user}\n                          />\n                        }\n                        {element.notification.action === 'entry' &&\n                          <NotificationEntry\n                            handleClose={handleClose}\n                            notification={element.notification}\n                            visitor_user={element.visitor_user}\n                          />\n                        }\n                      </>\n                    )}\n                  </List>\n                </>\n              }\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => { handleClose() }}>\n              閉じる\n            </Button>\n          </DialogActions>\n        </Dialog>\n      }\n      <MicropostDialog\n        handleClose={handleClose}\n        micropostId={micropostId}\n        open={dialogState.micropost}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}